library(scales)
# Entirely Deterministic
load("output/__RData/MSrevision_FixedDelta06_DetThreshDetUpdateDetQuit100reps.Rdata")
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 1) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
TaskFluct = (Task1Fluct + Task2Fluct) / 2)
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)),
TaskFluctMean = mean(TaskFluct, na.rm = TRUE),
TaskFluctSE = sd(TaskFluct, na.rm = TRUE) / sqrt(length(TaskFluct)) %>%
mutate(Source = "Deterministic")
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
tallySumFluct_all <- tallySumFluct
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)),
TaskFluctMean = mean(TaskFluct, na.rm = TRUE),
TaskFluctSE = sd(TaskFluct, na.rm = TRUE) / sqrt(length(TaskFluct))) %>%
mutate(Source = "Deterministic")
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
tallySumFluct_all <- tallySumFluct
View(tallySumFluct_all)
# Probabilistic thresholds
load("output/__RData/MSrevision_FixedDelta06_DetUpdateDetQuit100reps.Rdata")
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 1) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
TaskFluct = (Task1Fluct + Task2Fluct) / 2)
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)),
TaskFluctMean = mean(TaskFluct, na.rm = TRUE),
TaskFluctSE = sd(TaskFluct, na.rm = TRUE) / sqrt(length(TaskFluct))) %>%
mutate(Source = "Prob. Thresholds")
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
tallySumFluct_all <- rbind(tallySumFluct_all, tallySumFluct)
# Probabilistic quitting
load("output/__RData/MSrevision_FixedDelta06_DetThreshDetUpdate100reps.Rdata")
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 1) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
TaskFluct = (Task1Fluct + Task2Fluct) / 2)
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)),
TaskFluctMean = mean(TaskFluct, na.rm = TRUE),
TaskFluctSE = sd(TaskFluct, na.rm = TRUE) / sqrt(length(TaskFluct))) %>%
mutate(Source = "Prob. Quitting")
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
tallySumFluct_all <- rbind(tallySumFluct_all, tallySumFluct)
# Probabilistic Updating
load("output/__RData/MSrevision_FixedDelta06_DetThreshDetQuit100reps.Rdata")
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 1) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
TaskFluct = (Task1Fluct + Task2Fluct) / 2)
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)),
TaskFluctMean = mean(TaskFluct, na.rm = TRUE),
TaskFluctSE = sd(TaskFluct, na.rm = TRUE) / sqrt(length(TaskFluct))) %>%
mutate(Source = "Prob. Updating")
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
tallySumFluct_all <- rbind(tallySumFluct_all, tallySumFluct)
# Threshold Variation
load("output/__RData/MSrevision_FixedDelta06_DetThreshWithSigmaDetUpdateDetQuit100reps.Rdata")
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 1) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
TaskFluct = (Task1Fluct + Task2Fluct) / 2)
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)),
TaskFluctMean = mean(TaskFluct, na.rm = TRUE),
TaskFluctSE = sd(TaskFluct, na.rm = TRUE) / sqrt(length(TaskFluct))) %>%
mutate(Source = "Threshold Variation")
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
tallySumFluct_all <- rbind(tallySumFluct_all, tallySumFluct)
# Original model
load("output/__RData/FixedDelta06Sigma01Eta7100reps.Rdata")
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 1) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
TaskFluct = (Task1Fluct + Task2Fluct) / 2)
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)),
TaskFluctMean = mean(TaskFluct, na.rm = TRUE),
TaskFluctSE = sd(TaskFluct, na.rm = TRUE) / sqrt(length(TaskFluct))) %>%
mutate(Source = "Full Model")
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
tallySumFluct_all <- rbind(tallySumFluct_all, tallySumFluct)
# Plot
stimFluct_all$Source <- factor(stimFluct_all$Source, levels = c("Deterministic",
"Prob. Updating",
"Prob. Quitting",
"Prob. Thresholds",
"Threshold Variation",
"Full Model"))
# Plot all
gg_models <- ggplot(data = stimFluct_all) +
geom_line(aes(x = n, y = sFluctMean, colour = Source)) +
geom_errorbar(aes(x = n, ymin = sFluctMean - sFluctSE, ymax = sFluctMean + sFluctSE, colour = Source),
width = 1) +
geom_point(aes(x = n, y = sFluctMean, colour = Source),
size = 1.5) +
theme_classic() +
scale_color_brewer(palette = "Set2") +
scale_x_continuous(breaks = unique(stimFluct_all$n)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.95), breaks = seq(0, 1, 0.2)) +
xlab("Group size") +
ylab("Task fluctuation") +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_models
tallySumFluct_all$Source <- factor(tallySumFluct_all$Source, levels = c("Deterministic",
"Prob. Updating",
"Prob. Quitting",
"Prob. Thresholds",
"Threshold Variation",
"Full Model"))
# Plot all
gg_models <- ggplot(data = tallySumFluct_all) +
geom_line(aes(x = n, y = TaskFluctMean, colour = Source)) +
geom_errorbar(aes(x = n, ymin = TaskFluctMean - TaskFluctSE, ymax = TaskFluctMean + TaskFluctSE, colour = Source),
width = 1) +
geom_point(aes(x = n, y = TaskFluctMean, colour = Source),
size = 1.5) +
theme_classic() +
scale_color_brewer(palette = "Set2") +
scale_x_continuous(breaks = unique(tallySumFluct_all$n)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.95), breaks = seq(0, 1, 0.2)) +
xlab("Group size") +
ylab("Task fluctuation") +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_models
# Plot all
gg_models <- ggplot(data = tallySumFluct_all) +
geom_line(aes(x = n, y = TaskFluctMean, colour = Source)) +
geom_errorbar(aes(x = n, ymin = TaskFluctMean - TaskFluctSE, ymax = TaskFluctMean + TaskFluctSE, colour = Source),
width = 1) +
geom_point(aes(x = n, y = TaskFluctMean, colour = Source),
size = 1.5) +
theme_classic() +
scale_color_brewer(palette = "Set2") +
scale_x_continuous(breaks = unique(tallySumFluct_all$n)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.2), breaks = seq(0, 1, 0.2)) +
xlab("Group size") +
ylab("Task fluctuation") +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_models
# Plot all
gg_models <- ggplot(data = tallySumFluct_all) +
geom_line(aes(x = n, y = TaskFluctMean, colour = Source)) +
geom_errorbar(aes(x = n, ymin = TaskFluctMean - TaskFluctSE, ymax = TaskFluctMean + TaskFluctSE, colour = Source),
width = 1) +
geom_point(aes(x = n, y = TaskFluctMean, colour = Source),
size = 1.5) +
theme_classic() +
scale_color_brewer(palette = "Set2") +
scale_x_continuous(breaks = unique(tallySumFluct_all$n)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.15), breaks = seq(0, 1, 0.02)) +
xlab("Group size") +
ylab("Task fluctuation") +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_models
ggsave("output/StochasticElements/TaskFluctByModelType.png", width = 2, height = 2, dpi = 600, unit = "in")
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3_PrepPlotExperimentData.R")
library(RColorBrewer)
library(scales)
load("output/__RData/FixedDelta06Sigma01Eta7100reps.Rdata")
####################
# Stimulus Fluctuation
####################
# Unlist
stims <- unlist(groups_stim, recursive = FALSE)
stims <- do.call("rbind", stims)
# Within group - short term flucatuions vs specialization
# Load specialization
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
taskCorrTot <- taskCorrTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
select(n, TaskMean, Task1, Task2, Set)
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 200) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))))
# Summarise by n
stimSumFluct <- stimFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(s1FluctMean = mean(s1Fluct, na.rm = TRUE),
s1FluctSE = sd(s1Fluct, na.rm = TRUE) / sqrt(length(s1Fluct)),
s2FluctMean = mean(s2Fluct, na.rm = TRUE),
s2FluctSE = sd(s2Fluct, na.rm = TRUE) / sqrt(length(s2Fluct)))
stimSumFluct <- as.data.frame(stimSumFluct)
stimSumFluct <- stimSumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
# Merge
merged_specstim <- merge(taskCorrTot, stimFluct, by = c("Set", "n"))
merged_specstim <- merged_specstim %>%
mutate(sFluct = (s1Fluct + s2Fluct) / 2) %>%
group_by(n) %>%
mutate(s1Min = min(s1Fluct),
s1Max = max(s1Fluct),
s2Min = min(s2Fluct),
s2Max = max(s2Fluct),
sMin = min(sFluct),
sMax = max(sFluct),
TaskMeanMin = min(TaskMean),
TaskMeanMax = max(TaskMean)) %>%
mutate(s1Norm = (s1Fluct - s1Min) / (s1Max - s1Min),
s2Norm = (s2Fluct - s2Min) / (s2Max - s2Min),
sNorm = (sFluct - sMin) / (sMax - sMin),
TaskMeanNorm = (TaskMean - TaskMeanMin) / (TaskMeanMax - TaskMeanMin))
# Plot
# Palette with single individuals
palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78")
gg_specStimNorm <- ggplot(data = merged_specstim) +
geom_point(aes(x = TaskMeanNorm,
colour = as.factor(n),
y = s1Norm),
# colour = "#F23619",
size = 0.1) +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized stim. fluctuation") +
xlab("Normalized specialization") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
limits = c(-0.01, 1.01),
expand = c(0, 0)) +
scale_x_continuous(breaks = seq(0, 1, 0.2),
limits = c(-0.01, 1.01),
expand = c(0, 0)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 8, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"))
gg_specStimNorm
ggsave(filename = "output/FitnessPlots/StimFluctVsSpecializationWithinGroups_200timestep.png", height = 2, width = 2, dpi = 600)
