position = position_dodge(width = 1),
stroke = 0) +
theme_classic() +
xlab("Group size") +
ylab("Relative task 1 frequency") +
scale_x_continuous(breaks = unique(taskVarMean$n)) +
scale_y_continuous(breaks = seq(0, 1.5, 0.05)) +
# Mean and SE portion of plot
geom_errorbar(data = taskVarMeans,
aes(x = n, ymin = NormMean - NormMeanSE, ymax = NormMean + NormMeanSE, colour = Source),
width = 1.5,
position = position_dodge(width = 1)) +
geom_point(data = taskVarMeans,
aes(x = n, y = NormMean, colour = Source),
size = 2,
position = position_dodge(width = 1)) +
geom_line(data = taskVarMeans,
aes(x = n, y = NormMean, colour = Source),
position = position_dodge(width = 1)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))
####################
# Task Rank Correlation
####################
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Source = "Model") %>%
select(n, TaskMean, Source) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source))
# Calculate means and SE
taskCorrMeans <- taskCorrTot %>%
group_by(Source, n) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE)
# Plot
gg_corr <- ggplot() +
geom_hline(data = taskCorrTot,
aes(yintercept = 0),
colour = "grey30") +
geom_point(data = taskCorrTot,
aes(x = n, y = TaskMean, fill = Source, colour = Source),
size = 0.9,
position = position_dodge(width = 1),
alpha = 0.4,
stroke = 0) +
theme_classic() +
labs(x = "Group size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.2)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0))) +
# Mean and SE portion of plot
geom_errorbar(data = taskCorrMeans,
aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Source),
width = 1.5,
position = position_dodge(width = 1)) +
geom_point(data = taskCorrMeans,
aes(x = n, y = SpecMean, colour = Source, fill = Source),
position = position_dodge(width = 1),
size = 2) +
geom_line(data = taskCorrMeans,
aes(x = n, y = SpecMean,  colour = Source),
position = position_dodge(width = 1))
####################
# Plot all
####################
multiplot(gg_dist, gg_mean, gg_corr, gg_varNorm, cols = 2)
# Unlist
entropy <- unlist(groups_entropy, recursive = FALSE)
entropy <- do.call("rbind", entropy)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dyx) %>%
filter(n != 1)
####################
# Task Rank Correlation
####################
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Task1, -Task2)
####################
# Task Performance Specialization
####################
taskSpec <- groups_specialization %>%
group_by(n, replicate) %>%
summarise(SpecMean = mean(TransSpec))  %>%
mutate(set = paste(n, replicate, sep = "-"))
####################
# Bind together and summarise
####################
# Bind
metrics <- merge(taskCorrTot, entropy)
metrics <- merge(metrics, taskSpec)
# Summarise
metrics <- metrics %>%
melt(., id.vars = c("n", "replicate", "set"))
names(metrics) <- c("n", "replicate", "set", "metric", "value")
metrics <- metrics %>%
group_by(n, metric) %>%
summarise(Mean = mean(value),
SE = sd(value) / sqrt(length(value)))
names(metrics) <- c("n", "metric", "Mean", "SE")
levels(metrics$metric) <-c("Rank Correlation", "Task Entropy", "Task Consistency")
####################
# Plot
####################
gg_metric <- ggplot(data = metrics, aes(x = n, y = Mean, group = metric)) +
geom_hline(aes(yintercept = 0),
colour = "grey30",
size = 0.25) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.7) +
geom_line(aes(y = Mean, linetype = metric)) +
geom_point(aes(y = Mean, fill = metric),
size = 1.5,
shape = 21) +
theme_classic() +
xlab("Group Size") +
ylab("Value") +
scale_y_continuous(limits = c(-0.05, 0.65),
breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = unique(metrics$n)) +
scale_fill_manual(name = "Metric",
values = c("black", "white", "white")) +
scale_linetype_manual(name = "Metric",
values = c("solid", "dashed", "dotted")) +
theme(legend.position = "none",
legend.title = element_text(size = 7, face = "bold"),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0.1, r = 0.1, b = 0.1, l = 0.1, "cm"),
legend.text = element_text(size = 10),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.5),
panel.grid = element_blank(),
strip.text = element_text(size = 8, face = "italic"),
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.5, "cm")) +
facet_wrap(~ metric)
gg_metric
load("output/SpecializationMetrics/Rdata/FixedDelta06Sigma01Eta7100reps.Rdata")
####################
# Compare entropies
####################
# Unlist
entropy <- unlist(groups_entropy, recursive = FALSE)
entropy <- do.call("rbind", entropy)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dyx) %>%
filter(n != 1)
####################
# Task Rank Correlation
####################
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Task1, -Task2)
####################
# Task Performance Specialization
####################
taskSpec <- groups_specialization %>%
group_by(n, replicate) %>%
summarise(SpecMean = mean(TransSpec))  %>%
mutate(set = paste(n, replicate, sep = "-"))
####################
# Bind together and summarise
####################
# Bind
metrics <- merge(taskCorrTot, entropy)
metrics <- merge(metrics, taskSpec)
# Summarise
metrics <- metrics %>%
melt(., id.vars = c("n", "replicate", "set"))
names(metrics) <- c("n", "replicate", "set", "metric", "value")
metrics <- metrics %>%
group_by(n, metric) %>%
summarise(Mean = mean(value),
SE = sd(value) / sqrt(length(value)))
names(metrics) <- c("n", "metric", "Mean", "SE")
levels(metrics$metric) <-c("Rank Correlation", "Task Entropy", "Task Consistency")
####################
# Plot
####################
gg_metric <- ggplot(data = metrics, aes(x = n, y = Mean, group = metric)) +
geom_hline(aes(yintercept = 0),
colour = "grey30",
size = 0.25) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE),
width = 0.7) +
geom_line(aes(y = Mean, linetype = metric)) +
geom_point(aes(y = Mean, fill = metric),
size = 1.5,
shape = 21) +
theme_classic() +
xlab("Group Size") +
ylab("Value") +
scale_y_continuous(limits = c(-0.05, 0.65),
breaks = seq(0, 1, 0.2)) +
scale_x_continuous(breaks = unique(metrics$n)) +
scale_fill_manual(name = "Metric",
values = c("black", "white", "white")) +
scale_linetype_manual(name = "Metric",
values = c("solid", "dashed", "dotted")) +
theme(legend.position = "none",
legend.title = element_text(size = 7, face = "bold"),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0.1, r = 0.1, b = 0.1, l = 0.1, "cm"),
legend.text = element_text(size = 10),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.5),
panel.grid = element_blank(),
strip.text = element_text(size = 8, face = "italic"),
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.5, "cm")) +
facet_wrap(~ metric)
gg_metric
load("output/SpecializationMetrics/Rdata/ExtraLongRun_Eta7Sigma01100reps.Rdata")
stims <- unlist(groups_stim, recursive = FALSE)
stims <- do.call("rbind", stims)
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 1) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
sFluct = (s1Fluct + s2Fluct) / 2)
stimSumFluct <- stimFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(sFluctMean = mean(sFluct, na.rm = TRUE),
sFluctSE = sd(sFluct, na.rm = TRUE) / sqrt(length(sFluct))) %>%
mutate(Source = "Deterministic")
stimSumFluct <- as.data.frame(stimSumFluct)
stimFluct_all <- stimSumFluct
# Plot all
gg_models <- ggplot(data = stimFluct_all) +
geom_line(aes(x = n, y = sFluctMean, colour = Source)) +
geom_errorbar(aes(x = n, ymin = sFluctMean - sFluctSE, ymax = sFluctMean + sFluctSE, colour = Source),
width = 1) +
geom_point(aes(x = n, y = sFluctMean, colour = Source),
size = 1.5) +
theme_classic() +
scale_color_brewer(palette = "Set2") +
scale_x_continuous(breaks = unique(stimFluct_all$n)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.95), breaks = seq(0, 1, 0.2)) +
xlab("Group size") +
ylab("Stimulus fluctuation") +
theme(legend.position = "right",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = 0, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_models
noTaskPerf <- lapply(groups_taskTally, function(group_size) {
# Loop through replicates within group size
within_groupTaskPerf <- lapply(group_size, function(replicate) {
# Get basics and counts of instances in which there isn't anyone performing task
to_return <- data.frame(n = unique(replicate$n),
replicate = unique(replicate$replicate),
Set = paste0(unique(replicate$n), "-", unique(replicate$replicate)),
noTask1 = sum(replicate$Task1 == 0),
noTask2 = sum(replicate$Task2 == 0))
#  Quantify length of no-performance bouts
for (task in c("Task1", "Task2")) {
bout_lengths <- rle(replicate[ , task])
bout_lengths <- as.data.frame(do.call("cbind", bout_lengths))
bout_lengths <- bout_lengths %>%
filter(values == 0)
avg_nonPerformance <- mean(bout_lengths$lengths)
if(task == "Task1") {
to_return$noTask1Length = avg_nonPerformance
}
else {
to_return$noTask2Length = avg_nonPerformance
}
}
# Get averages
to_return <- to_return %>%
mutate(noTaskAvg = (noTask1 + noTask2) / 2,
noTaskLengthAvg = (noTask1Length + noTask2Length) / 2)
# Return
return(to_return)
})
# Bind and return
within_groupTaskPerf <- do.call("rbind", within_groupTaskPerf)
return(within_groupTaskPerf)
})
# Bind
noTaskPerf <- do.call("rbind", noTaskPerf)
noTaskPerf <- noTaskPerf %>%
group_by(n) %>%
mutate(noTask1 = noTask1 / 10000,
noTask2 = noTask2 / 10000,
noTaskAvg = noTaskAvg / 10000) %>%
summarise(TaskNegelectMean = mean(noTaskAvg, na.rm = TRUE),
TaskNegelectSE = ( sd(noTaskAvg) / sqrt(length(noTaskAvg)) )) %>%
mutate(Source = "Deterministic")
taskNeglect_all <- noTaskPerf
# Plot all
gg_models <- ggplot(data = taskNeglect_all) +
geom_line(aes(x = n, y = TaskNegelectMean, colour = Source)) +
geom_errorbar(aes(x = n, ymin = TaskNegelectMean - TaskNegelectSE, ymax = TaskNegelectMean + TaskNegelectSE, colour = Source),
width = 1) +
geom_point(aes(x = n, y = TaskNegelectMean, colour = Source),
size = 1.5) +
theme_classic() +
scale_color_brewer(palette = "Set2") +
scale_x_continuous(breaks = unique(taskNeglect_all$n)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +
xlab("Group size") +
ylab("Task negelect") +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 10),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_models
noTaskPerf <- lapply(groups_taskTally, function(group_size) {
# Loop through replicates within group size
within_groupTaskPerf <- lapply(group_size, function(replicate) {
# Get basics and counts of instances in which there isn't anyone performing task
to_return <- data.frame(n = unique(replicate$n),
replicate = unique(replicate$replicate),
Set = paste0(unique(replicate$n), "-", unique(replicate$replicate)),
noTask1 = sum(replicate$Task1 == 0),
noTask2 = sum(replicate$Task2 == 0))
#  Quantify length of no-performance bouts
for (task in c("Task1", "Task2")) {
bout_lengths <- rle(replicate[ , task])
bout_lengths <- as.data.frame(do.call("cbind", bout_lengths))
bout_lengths <- bout_lengths %>%
filter(values == 0)
avg_nonPerformance <- mean(bout_lengths$lengths)
if(task == "Task1") {
to_return$noTask1Length = avg_nonPerformance
}
else {
to_return$noTask2Length = avg_nonPerformance
}
}
# Get averages
to_return <- to_return %>%
mutate(noTaskAvg = (noTask1 + noTask2) / 2,
noTaskLengthAvg = (noTask1Length + noTask2Length) / 2)
# Return
return(to_return)
})
# Bind and return
within_groupTaskPerf <- do.call("rbind", within_groupTaskPerf)
return(within_groupTaskPerf)
})
# Bind
noTaskPerf <- do.call("rbind", noTaskPerf)
noTaskPerf <- noTaskPerf %>%
group_by(n) %>%
mutate(noTask1 = noTask1 / 100000,
noTask2 = noTask2 / 100000,
noTaskAvg = noTaskAvg / 100000) %>%
summarise(TaskNegelectMean = mean(noTaskAvg, na.rm = TRUE),
TaskNegelectSE = ( sd(noTaskAvg) / sqrt(length(noTaskAvg)) )) %>%
mutate(Source = "Deterministic")
taskNeglect_all <- noTaskPerf
# Plot all
gg_models <- ggplot(data = taskNeglect_all) +
geom_line(aes(x = n, y = TaskNegelectMean, colour = Source)) +
geom_errorbar(aes(x = n, ymin = TaskNegelectMean - TaskNegelectSE, ymax = TaskNegelectMean + TaskNegelectSE, colour = Source),
width = 1) +
geom_point(aes(x = n, y = TaskNegelectMean, colour = Source),
size = 1.5) +
theme_classic() +
scale_color_brewer(palette = "Set2") +
scale_x_continuous(breaks = unique(taskNeglect_all$n)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.8)) +
xlab("Group size") +
ylab("Task negelect") +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 10),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_models
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 1) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
TaskFluct = (Task1Fluct + Task2Fluct) / 2)
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)),
TaskFluctMean = mean(TaskFluct, na.rm = TRUE),
TaskFluctSE = sd(TaskFluct, na.rm = TRUE) / sqrt(length(TaskFluct))) %>%
mutate(Source = "Deterministic")
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
tallySumFluct_all <- tallySumFluct
# Plot all
gg_models <- ggplot(data = tallySumFluct_all) +
geom_line(aes(x = n, y = TaskFluctMean, colour = Source)) +
geom_errorbar(aes(x = n, ymin = TaskFluctMean - TaskFluctSE, ymax = TaskFluctMean + TaskFluctSE, colour = Source),
width = 1) +
geom_point(aes(x = n, y = TaskFluctMean, colour = Source),
size = 1.5) +
theme_classic() +
scale_color_brewer(palette = "Set2") +
scale_x_continuous(breaks = unique(tallySumFluct_all$n)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, 0.15), breaks = seq(0, 1, 0.02)) +
xlab("Group size") +
ylab("Task fluctuation") +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_models
