suppressWarnings(print(gg_taskfreq))
suppressMessages(print(gg_taskfreq))
suppressWarnings(supressMessages(print(gg_taskfreq)))
suppressWarnings(suppressMessages(print(gg_taskfreq)))
layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
gg_taskfreq
g <- barabasi.game(n = N, m = 2, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
plot(g,
layout = layout,
vertex.label = NA,
vertex.size = 7)
# Make matrix
adj <- as.matrix(gAdj)
# State matrix
state <- seedState(N) #maybe start in more favorable task
# Threshold matrix
thresh <- seedThresholds(N = N, Thresh1 = Thresh1, Thresh2 = Thresh2, ThreshSD = ThreshSD)
# Colors
colorState <- colorByState(state)
g_soc <- g %>%
set_vertex_attr("color", value = colorState)
# Scale free network
g <- barabasi.game(n = N, m = 2, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
netPower <- 1.2
N <- 100
gens <- 50
netPower <- 1.2
probOfUpdate <- 1
Thresh1 <- 0.5
Thresh2 <- 0.5
ThreshSD <- 0.1
folderName <- "N100_Threshold_LowerPower"
# Scale free network
g <- barabasi.game(n = N, m = 2, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
plot(g,
layout = layout,
vertex.label = NA,
vertex.size = 7)
# Make matrix
adj <- as.matrix(gAdj)
# State matrix
state <- seedState(N) #maybe start in more favorable task
# Threshold matrix
thresh <- seedThresholds(N = N, Thresh1 = Thresh1, Thresh2 = Thresh2, ThreshSD = ThreshSD)
# Colors
colorState <- colorByState(state)
g_soc <- g %>%
set_vertex_attr("color", value = colorState)
# Quantify state of tasks
blue <- length(colorState[colorState == "blue"])/N
taskFreq <- data.frame(Generation = 0:gens, FreqTask1 = c(blue, rep(NA, gens)))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
gg_taskfreq
layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
gg_taskfreq
test <- plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
test
multiplot( plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color), gg_taskfreq, ncol = 2)
grid.arrange( plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color), gg_taskfreq, ncol = 2)
layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = NULL,
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
par(mfrow = c(2, 1))
# layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
par(mfrow = c(1, 2))
# layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
path <- paste0(folderPath, "/Gen0", ".jpg")
png(filename = path, width = 400, height = 800, units = "px")
par(mfrow = c(1, 2))
# layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
dev.off()
hist(Thresh1)
hist(Thresh1[,1])
dim(thresh)
hist(thresh[,1])
plot(thresh[,1], type = "h")
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
# Set parameters
N <- 100
gens <- 50
netPower <- 1.2
probOfUpdate <- 1
Thresh1 <- 0.5
Thresh2 <- 0.5
ThreshSD <- 0.1
folderName <- "N100_Threshold_LowerPower"
source("scripts/__Util_ThreshVoterFunctions.R")
# Scale free network
g <- barabasi.game(n = N, m = 2, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
plot(g,
layout = layout,
vertex.label = NA,
vertex.size = 7)
# Make matrix
adj <- as.matrix(gAdj)
# State matrix
state <- seedState(N) #maybe start in more favorable task
# Threshold matrix
thresh <- seedThresholds(N = N, Thresh1 = Thresh1, Thresh2 = Thresh2, ThreshSD = ThreshSD)
# Colors
colorState <- colorByState(state)
g_soc <- g %>%
set_vertex_attr("color", value = colorState)
# Quantify state of tasks
blue <- length(colorState[colorState == "blue"])/N
# Create Folder to output plots
folderPath <- paste0("output/", folderName)
dir.create(folderPath, showWarnings = FALSE)
hist(thresh[,1])
hist(thresh[,1], breaks = 0.05)
hist(thresh[,1], breaks = seq(0,1,0.05))
hist(thresh[,1], breaks = seq(0, 1, 0.05), ylab = NULL, xlab = NULL)
hist(thresh[,1],
breaks = seq(0, 1, 0.05),
col = rgb(1, 0, 0, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution")
hist(thresh[,1],
breaks = seq(0, 1, 0.05),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution")
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
hist(thresh[, 1],
breaks = seq(0, 1, 0.01),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution")
hist(thresh[, 1],
breaks = seq(0, 1, 0.1),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution")
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
hist(thresh[, 1],
breaks = seq(0, 1, 0.05),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution")
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
hist(thresh[, 1],
breaks = seq(0, 1, 0.05),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution",
ylim = c(0, 25))
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
ylim = c(0, 35))
hist(thresh[, 1],
breaks = seq(0, 1, 0.05),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution",
ylim = c(0, 30))
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
hist1 <- hist(thresh[, 1], breaks = seq(0, 1, 0.05))
hist(thresh)
max(hist(thresh[,1])
max(hist(thresh[,1])$count)
max(hist(thresh[,1], breaks = seq(0, 1, 0.05))$count, hist(thresh[,2], breaks = seq(0, 1, 0.05))$count)
histLim <- max(hist(thresh[,1], breaks = seq(0, 1, 0.05))$count, hist(thresh[,2], breaks = seq(0, 1, 0.05))$count)
hist(thresh[, 1],
breaks = seq(0, 1, 0.05),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution",
ylim = c(0, histLim))
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
hist(thresh[, 1],
breaks = seq(0, 1, 0.05),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution",
ylim = c(0, histLim))
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
abs(-1)
switchState <- rep(NA, gens + 1)
layout(matrix(c(1, 1, 1, 1, 1, 1, 2, 3, 4), nrow = 3, ncol = 3, byrow = TRUE))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
hist(thresh[, 1],
breaks = seq(0, 1, 0.05),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution",
ylim = c(0, histLim))
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
plot(x = 0:gens,
y = switchState,
ylab = NULL,
xlab = "Generation",
main = "Frequency of Task Switches",
ylim = c(0, 0.2))
plot(g_soc,
layout = layout,
vertex.label = NA,
vertex.size = 7,
vertex.color=V(g)$color)
hist(thresh[, 1],
breaks = seq(0, 1, 0.05),
col = rgb(0, 0, 1, 0.5),
ylab = NULL,
xlab = NULL,
main = "Threshold Distribution",
ylim = c(0, histLim))
hist(thresh[, 2],
col = rgb(1, 0, 0, 0.5),
add = TRUE)
plot(x = 0:gens,
y = c(blue, rep(NA, gens)),
pch = 20,
ylab = '',
xlab = "Generation",
ylim = c(0, 1),
main = "Frequency of Task 1")
lines(x = c(0, gens),
y = c(0.5, 0.5))
plot(x = 0:gens,
y = switchState,
ylab = '',
xlab = "Generation",
main = "Frequency of Task Switches",
ylim = c(0, 0.2))
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
ThreshSD <- 0.2
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
max(c(1,2,3,4), c(5,6,7))
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/__Util_ThreshVoterFunctions.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/__Util_ThreshVoterFunctions.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/__Util_ThreshVoterFunctions.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/scripts/2_ThresholdVoter.R', echo=TRUE)
# Required libraries
require(igraph)
require(msm)
source("scripts/__Util_ForceAtlas2.R")
# Set parameters
N <- 100
gens <- 50
netPower <- 1.5
probOfUpdate <- 1
Thresh1 <- 0.5
Thresh2 <- 0.5
ThreshSD <- 0.2
g <- barabasi.game(n = N, m = 2, power = netPower, directed = FALSE)
transitivity(g)
transitivity(g, type = c("undirected"))
netPower = 2
g <- barabasi.game(n = N, m = 2, power = netPower, directed = FALSE)
transitivity(g, type = c("undirected"))
g <- barabasi.game(n = N, m = 2, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
plot(g,
layout = layout,
vertex.label = NA,
vertex.size = 7)
g <- barabasi.game(n = N, m = 3, power = netPower, directed = FALSE)
transitivity(g, type = c("undirected"))
netPower = 1.2
g <- barabasi.game(n = N, m = 3, power = netPower, directed = FALSE)
transitivity(g, type = c("undirected"))
g <- barabasi.game(n = N, m = 3, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
plot(g,
layout = layout,
vertex.label = NA,
vertex.size = 7)
N = 20
g <- barabasi.game(n = N, m = 3, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
plot(g,
layout = layout,
vertex.label = NA,
vertex.size = 7)
transitivity(g, type = c("undirected"))
netPower = 2.5
g <- barabasi.game(n = N, m = 3, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
plot(g,
layout = layout,
vertex.label = NA,
vertex.size = 7)
transitivity(g, type = c("undirected"))
netPower = 1
g <- barabasi.game(n = N, m = 3, power = netPower, directed = FALSE)
layout <- layout.forceatlas2(g,
iterations = 1000,
k = 200,
plotstep = 0)
gAdj <- as_adjacency_matrix(g)
plot(g,
layout = layout,
vertex.label = NA,
vertex.size = 7)
transitivity(g, type = c("undirected"))
source('~/Documents/Research/Tarnita Lab/Incipient Groups DOL/DOLThresholdModel/scripts/1A_ProbThreshModel.R', echo=TRUE)
