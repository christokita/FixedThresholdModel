legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0.1, r = 0.1, b = 0.1, l = 0.1, "cm"),
legend.text = element_text(size = 10),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.5),
panel.grid = element_blank(),
strip.text = element_text(size = 8, face = "italic"),
strip.background = element_rect(fill = NA, colour = NA),
panel.spacing = unit(0.5, "cm")) +
facet_wrap(~ metric)
gg_metric
ggsave(gg_metric, file = "output/SpecializationMetrics/Plots/AllMetricsComparison_TEST.png", height = 2.1, width = 5, units = "in", dpi = 800)
metrics1 <- metrics
####################
# Compare entropies
####################
# Unlist
entropy <- unlist(groups_entropy, recursive = FALSE)
entropy <- do.call("rbind", entropy)  %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Dsym, -Dyx) %>%
filter(n != 1)
####################
# Task Rank Correlation
####################
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(set = paste(n, replicate, sep = "-"))%>%
select(-Task1, -Task2)
####################
# Task Performance Specialization
####################
taskSpec <- groups_specialization %>%
group_by(n, replicate) %>%
summarise(SpecMean = mean(TransSpec))  %>%
mutate(set = paste(n, replicate, sep = "-"))
####################
# Bind together and summarise
####################
# Bind
metrics <- merge(taskCorrTot, entropy)
metrics <- merge(metrics, taskSpec)
# Summarise
metrics <- metrics %>%
melt(., id.vars = c("n", "replicate", "set"))
names(metrics) <- c("n", "replicate", "set", "metric", "value")
metrics <- metrics %>%
group_by(n, metric) %>%
summarise(Mean = mean(value),
SE = sd(value) / sqrt(length(value)))
names(metrics) <- c("n", "metric", "Mean", "SE")
levels(metrics$metric) <-c("Rank Correlation", "Task Entropy", "Task Consistency")
View(metrics)
View(metrics1)
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/FixedDelta06Sigma01Eta7100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Model vs Data Palette
compPalette <- c("indianred2", "black")
####################
# Task Rank Correlation
####################
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Source = "Model") %>%
select(n, TaskMean, Source) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source))
# Calculate means and SE
taskCorrMeans <- taskCorrTot %>%
group_by(Source, n) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE)
# Plot
gg_corr <- ggplot() +
geom_hline(data = taskCorrTot,
aes(yintercept = 0),
colour = "grey30") +
geom_point(data = taskCorrTot,
aes(x = n, y = TaskMean, fill = Source, colour = Source),
size = 0.9,
position = position_dodge(width = 1),
alpha = 0.4,
stroke = 0) +
theme_classic() +
labs(x = "Group size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.2)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0))) +
# Mean and SE portion of plot
geom_errorbar(data = taskCorrMeans,
aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Source),
width = 1.5,
position = position_dodge(width = 1)) +
geom_point(data = taskCorrMeans,
aes(x = n, y = SpecMean, colour = Source, fill = Source),
position = position_dodge(width = 1),
size = 2) +
geom_line(data = taskCorrMeans,
aes(x = n, y = SpecMean,  colour = Source),
position = position_dodge(width = 1))
gg_corr
View(taskCorrTot)
####################
# Stimulus Fluctuation
####################
# Unlist
stims <- unlist(groups_stim, recursive = FALSE)
stims <- do.call("rbind", stims)
#### 200 Time steps ####
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 200) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))))
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))))
F
View(stimFluct)
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
View(taskCorrTot)
taskCorrTot <- taskCorrTot %>%
mutate(Set = paste0(n, "-", replicate))
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
select(n, TaskMean, Set)
View(taskCorrTot)
####################
# Stimulus Fluctuation
####################
# Unlist
stims <- unlist(groups_stim, recursive = FALSE)
stims <- do.call("rbind", stims)
#### 200 Time steps ####
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 200) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))))
View(stimFluct)
####################
# Merge
####################
test <- merge(taskCorrTot, stimFluct, by = "Set")
View(test)
####################
# Merge
####################
merged_specstim <- merge(taskCorrTot, stimFluct, by = "Set")
plot(merged_specstim$TaskMean, merged_specstim$s1Fluct)
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct)) +
geom_point() +
facet_wrap(. ~ n)
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct)) +
geom_point() +
facet_wrap(~ n)
gg_compare
names(merged_specstim)
####################
# Merge and plot
####################
# Merge
merged_specstim <- merge(taskCorrTot, stimFluct, by = c("Set", n))
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct)) +
geom_point() +
facet_wrap(~ n)
gg_compare
names(merged_specstim)
####################
# Merge and plot
####################
# Merge
merged_specstim <- merge(taskCorrTot, stimFluct, by = c("Set", "n"))
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct)) +
geom_point() +
facet_wrap(~ n)
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct)) +
geom_point() +
facet_wrap(~ n, scales = "free_y")
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct)) +
geom_point() +
facet_wrap(~ n, scales = "free_x")
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct)) +
geom_point() +
facet_wrap(~ n, scales = "free")
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s2Fluct)) +
geom_point() +
facet_wrap(~ n, scales = "free")
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s2Fluct)) +
geom_point() +
facet_wrap(~ n, scales = "free_y")
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s2Fluct)) +
geom_point() +
theme_classic()
facet_wrap(~ n, scales = "free_y")
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s2Fluct)) +
geom_point() +
theme_classic() +
facet_wrap(~ n, scales = "free_y")
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s2Fluct)) +
geom_point() +
theme_classic() +
facet_wrap(~ n)
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(y = TaskMean, x = s1Fluct)) +
geom_point() +
theme_classic() +
facet_wrap(~ n)
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = n)) +
geom_point() +
theme_classic() +
facet_wrap(~ n)
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
facet_wrap(~ n)
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
facet_wrap(~ n)
gg_compare
# Palette without single individuals
palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
facet_wrap(~ n)
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
facet_wrap(~ n, scale = "free")
gg_compare
# Plot
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette)
gg_compareTot
# Plot
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette, label = "Group Size")
gg_compareTot
# Plot
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette, name = "Group Size")
gg_compareTot
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
theme(guides = element_blank()) +
facet_wrap(~ n, scale = "free")
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
theme(legend.position = "none") +
facet_wrap(~ n, scale = "free")
gg_compare
# Plot
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette, name = "Group Size")
gg_compareTot
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
stimFluct = mean(s1Fluct, s2Fluct))
####################
# Merge and plot
####################
# Merge
merged_specstim <- merge(taskCorrTot, stimFluct, by = c("Set", "n"))
# Plot
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = stimFluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette, name = "Group Size") +
xlab("Task Correlation") +
ylab("Stim 1 Fluctuations")
gg_compareTot
#### 200 Time steps ####
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 200) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
stimFluct = mean(s1Fluct, s2Fluct))
####################
# Merge and plot
####################
# Merge
merged_specstim <- merge(taskCorrTot, stimFluct, by = c("Set", "n"))
# Plot
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = stimFluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette, name = "Group Size") +
xlab("Task Correlation") +
ylab("Stim 1 Fluctuations")
gg_compareTot
View(merged_specstim)
stims <- unlist(groups_stim, recursive = FALSE)
stims <- do.call("rbind", stims)
#### 200 Time steps ####
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 200) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
stimFluct = (s1Fluct + s2Fluct) / 2)
####################
# Merge and plot
####################
# Merge
merged_specstim <- merge(taskCorrTot, stimFluct, by = c("Set", "n"))
# Plot
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = stimFluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette, name = "Group Size") +
xlab("Task Correlation") +
ylab("Stim 1 Fluctuations")
gg_compareTot
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = stimFluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
theme(legend.position = "none") +
facet_wrap(~ n, scale = "free")
gg_compare
# Plot
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette, name = "Group Size") +
xlab("Task Correlation") +
ylab("Stim 1 Fluctuations")
gg_compareTot
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
theme(legend.position = "none") +
facet_wrap(~ n, scale = "free") +
xlab("Task Correlation") +
ylab("Stim 1 Fluctuations")
gg_compare
# Plot
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
theme(legend.position = "none") +
facet_wrap(~ n) +
xlab("Task Correlation") +
ylab("Stim 1 Fluctuations")
gg_compare
