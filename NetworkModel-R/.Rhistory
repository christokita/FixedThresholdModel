# Calculate mean correlation for each n
runCorrs <- lapply(ens_taskCorr, function(x) {
# Unlist
runs <- do.call("rbind", x)
# Calculate mean
runMean <- matrix(data = rep(NA, m), ncol =  m)
for (column in 1:m) {
runMean[ , column] <- mean(runs[ , column], na.rm = TRUE)
}
colnames(runMean) <- colnames(runs)
return(runMean)
})
runCorrs <- do.call("rbind", runCorrs)
runCorrs <- transform(runCorrs, n = n)
# Add to list of lists
groups_taskDist[[i]]  <- ens_taskDist
groups_taskCorr[[i]]  <- runCorrs
groups_taskStep[[i]]  <- ens_taskStep
groups_taskTally[[i]] <- ens_taskTally
groups_stim[[i]]      <- ens_stim
groups_entropy[[i]]   <- ens_entropy
}
# trim out correlations for group size 1
if(1 %in% Ns) {
groups_taskCorr <- groups_taskCorr[-1]
}
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
# Set variable
filename <- "Fixed_Delta06Sigma005Eta25"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Model vs Data Palette
compPalette <- c("indianred2", "black")
####################
# Final task distributions
####################
# Bind together
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
# Manipulate
taskDistTot <- taskDistTot %>%
mutate(set = paste0(n, "-", replicate)) %>%
mutate(set = factor(set,
levels = mixedsort(unique(set))),
n = as.factor(n))
taskSum <- taskDistTot %>%
group_by(n) %>%
summarise(taskMean1 = mean(Task1),
taskMean2 = mean(Task2))
# Plot
plot_TaskMat <- as.data.frame(taskDistTot)
gg_dist <- ggplot(data = plot_TaskMat, aes(y = Task1, x = set)) +
geom_point(aes(colour = n), size = 0.3) +
theme_classic() +
labs(x = "\nGroup Size",
y = "Frequency Task 1") +
scale_color_manual(values = palette) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = "none")
####################
# Task variance by group size
####################
# Prep
taskVarMean <- taskDistTot %>%
mutate(n = as.character(n)) %>%
mutate(n = as.numeric(n)) %>%
group_by(n, replicate) %>%
summarise(SD1 = sd(Task1),
SD2 = sd(Task2),
Mean = mean(Task1)) %>%
mutate(Source = "Model",
SD = (SD1 + SD2) / 2)
taskVarMean$SD[is.na(taskVarMean$SD)] <- 0 #fix for single individuals
taskVarMean <- rbind(taskVarMean, yukoDataSummary)
# Calculate means and SE
taskVarMeans <- taskVarMean %>%
group_by(n, Source) %>%
summarise(MeanMean = mean(Mean),
MeanSE = sd(Mean) / sqrt(length(Mean)),
SDMean = mean(SD),
SDSE = sd(SD) / sqrt(length(SD)))
# Get mean at group size one and normalize
expSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == "Experiment"]
modSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == "Model"]
expSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == "Experiment"]
modSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == "Model"]
# Normalize Mean Values
taskVarMeans$NormMean <- NA
taskVarMeans$NormMeanSE <- NA
taskVarMeans$NormMean[taskVarMeans$Source == "Experiment"] <- taskVarMeans$MeanMean[taskVarMeans$Source == "Experiment"] / expSizeOne
taskVarMeans$NormMean[taskVarMeans$Source == "Model"] <- taskVarMeans$MeanMean[taskVarMeans$Source == "Model"] / modSizeOne
taskVarMeans$NormMeanSE[taskVarMeans$Source == "Experiment"] <- taskVarMeans$MeanSE[taskVarMeans$Source == "Experiment"] / expSizeOne
taskVarMeans$NormMeanSE[taskVarMeans$Source == "Model"] <- taskVarMeans$MeanSE[taskVarMeans$Source == "Model"] / modSizeOne
taskVarMean$NormMean <- NA
taskVarMean$NormMean[taskVarMean$Source == "Experiment"] <- taskVarMean$Mean[taskVarMean$Source == "Experiment"] / expSizeOne
taskVarMean$NormMean[taskVarMean$Source == "Model"] <- taskVarMean$Mean[taskVarMean$Source == "Model"] / modSizeOne
# Normalize behavioral variation values
taskVarMeans$NormVarMean <- NA
taskVarMeans$NormVarMeanSE <- NA
taskVarMeans$NormVarMean[taskVarMeans$Source == "Experiment"] <- taskVarMeans$SDMean[taskVarMeans$Source == "Experiment"] / expSizeSixteen
taskVarMeans$NormVarMean[taskVarMeans$Source == "Model"] <- taskVarMeans$SDMean[taskVarMeans$Source == "Model"] / modSizeSixteen
taskVarMeans$NormVarMeanSE[taskVarMeans$Source == "Experiment"] <- taskVarMeans$SDSE[taskVarMeans$Source == "Experiment"] / expSizeSixteen
taskVarMeans$NormVarMeanSE[taskVarMeans$Source == "Model"] <- taskVarMeans$SDSE[taskVarMeans$Source == "Model"] / modSizeSixteen
taskVarMean$NormVarMean <- NA
taskVarMean$NormVarMean[taskVarMean$Source == "Experiment"] <- taskVarMean$SD[taskVarMean$Source == "Experiment"] / expSizeSixteen
taskVarMean$NormVarMean[taskVarMean$Source == "Model"] <- taskVarMean$SD[taskVarMean$Source == "Model"] / modSizeSixteen
# Plot variance and mean by group size
gg_var <- ggplot() +
geom_point(data = taskVarMean,
aes(x = n, y = SD, colour = Source),
size = 0.5,
alpha = 0.4,
position = position_dodge(width = 1)) +
theme_classic() +
xlab("Group Size") +
ylab("Behavioral Variation (SD)") +
scale_x_continuous(breaks = unique(taskVarMean$n)) +
scale_y_continuous(breaks = seq(0, 1, 0.025)) +
# Mean and SE portion of plot
geom_errorbar(data = taskVarMeans,
aes(x = n, ymin = SDMean - SDSE, ymax = SDMean + SDSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskVarMeans,
aes(x = n, y = SDMean, colour = Source),
size = 2,
position = position_dodge(width = 1)) +
geom_line(data = taskVarMeans,
aes(x = n, y = SDMean, colour = Source),
position = position_dodge(width = 1)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none")
gg_varNorm <- ggplot() +
geom_hline(data = taskVarMean,
aes(yintercept = 1),
colour = "grey30") +
geom_point(data = taskVarMean,
aes(x = n, y = NormVarMean, colour = Source),
size = 0.8,
alpha = 0.4,
position = position_dodge(width = 1)) +
theme_classic() +
xlab("Group Size") +
ylab("Behavioral Variation (SD)\nRelative to Group Size 16") +
scale_x_continuous(breaks = unique(taskVarMean$n)) +
scale_y_continuous(breaks = seq(0, 3, 0.5)) +
# Mean and SE portion of plot
geom_errorbar(data = taskVarMeans,
aes(x = n, ymin = NormVarMean - NormVarMeanSE, ymax = NormVarMean + NormVarMeanSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskVarMeans,
aes(x = n, y = NormVarMean, colour = Source),
size = 2,
position = position_dodge(width = 1)) +
geom_line(data = taskVarMeans,
aes(x = n, y = NormVarMean, colour = Source),
position = position_dodge(width = 1)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none")
gg_mean <- ggplot() +
geom_hline(data = taskVarMean,
aes(yintercept = 1),
colour = "grey30") +
geom_point(data = taskVarMean,
aes(x = n, y = NormMean, colour = Source),
size = 0.5,
alpha = 0.4,
position = position_dodge(width = 1)) +
theme_classic() +
xlab("Group Size") +
ylab("Behavioral Mean Relative to Group Size 1") +
scale_x_continuous(breaks = unique(taskVarMean$n)) +
scale_y_continuous(breaks = seq(0, 1.5, 0.05)) +
# Mean and SE portion of plot
geom_errorbar(data = taskVarMeans,
aes(x = n, ymin = NormMean - NormMeanSE, ymax = NormMean + NormMeanSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskVarMeans,
aes(x = n, y = NormMean, colour = Source),
size = 2,
position = position_dodge(width = 1)) +
geom_line(data = taskVarMeans,
aes(x = n, y = NormMean, colour = Source),
position = position_dodge(width = 1)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none")
####################
# Plot task tallies over time
####################
# Unlist
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
# Normalize
tallies <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
n = factor(n)) %>%
select(-replicate) %>%
melt(id.vars = c("n", "t")) %>%
rename(Task = variable, Freq = value) %>%
group_by(n, t, Task) %>%
summarise(MeanFreq = mean(Freq))
# Plot
colPal <- colorRampPalette(c("#d3afff", "#1f0242"))
numbers <- length(unique(tallies$n))
gg_tally <- ggplot(data = tallies, aes(x = t)) +
geom_line(aes(y = MeanFreq, group = n, colour = n)) +
# geom_smooth(method = "lm",
#             aes(y = MeanFreq),
#             se = FALSE,
#             colour = "black",
#             size = 0.5) +
theme_classic() +
scale_color_manual(values = palette) +
scale_y_continuous(breaks = seq(0, 1, 0.5), limits = c(0, 1)) +
scale_x_continuous(breaks = seq(0, 10000, 10000)) +
xlab("Time") +
ylab("Mean Proportion of Colony") +
facet_grid(n ~ Task) +
theme(legend.position = "none",
# axis.text.x = element_blank(),
panel.spacing.x = unit(1, "lines"),
panel.spacing.y = unit(0.8, "lines"))
####################
# Task Rank Correlation
####################
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Source = "Model") %>%
select(n, TaskMean, Source) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source))
# Calculate means and SE
taskCorrMeans <- taskCorrTot %>%
group_by(Source, n) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE)
# Plot
gg_corr <- ggplot() +
geom_hline(data = taskCorrTot,
aes(yintercept = 0),
colour = "grey30") +
geom_point(data = taskCorrTot,
aes(x = n, y = TaskMean, fill = Source, colour = Source),
size = 0.5,
position = position_dodge(width = 1),
alpha = 0.4) +
theme_classic() +
labs(x = "Group Size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.2)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none") +
# Mean and SE portion of plot
geom_errorbar(data = taskCorrMeans,
aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskCorrMeans,
aes(x = n, y = SpecMean, colour = Source, fill = Source),
position = position_dodge(width = 1),
size = 2) +
geom_line(data = taskCorrMeans,
aes(x = n, y = SpecMean,  colour = Source),
position = position_dodge(width = 1))
####################
# Plot stimulus
####################
# Unlist
stims <- unlist(groups_stim, recursive = FALSE)
stims <- do.call("rbind", stims)
# Prep for plot
stims <- stims %>%
mutate(n = factor(n)) %>%
group_by(n, replicate) %>%
mutate(t = 0:(length(n) - 1))
stims <- stims %>%
select(-delta1, -delta2) %>%
group_by(n, t) %>%
summarise(Stimulus1 = mean(s1),
Stimulus2 = mean(s2)) %>%
melt(id.vars = c("n", "t")) %>%
rename(Stim = variable)
# Plot
gg_stim <- ggplot(data = stims, aes(x = t)) +
geom_line(aes(y = value, group = n, colour = n)) +
# geom_smooth(method = "lm",
#             aes(y = value),
#             se = FALSE,
#             colour = "black",
#             size = 0.5) +
theme_classic() +
scale_color_manual(values = palette) +
scale_y_continuous(breaks = seq(0, 100, 5)) +
scale_x_continuous(breaks = seq(0, 10000, 5000)) +
xlab("Time") +
ylab("Mean Stimulus") +
facet_grid(n ~ Stim) +
theme(legend.position = "none",
# axis.text.x = element_blank(),
panel.spacing.x = unit(1, "lines"))
####################
# Plot all
####################
save(groups_entropy, groups_stim, groups_taskCorr, groups_taskDist, groups_taskStep, groups_taskTally, taskCorrTot,
file = paste0("output/__RData/", filename, ".Rdata"))
gg_corr
View(taskCorrMeans)
.77-.34
####################
# Parameter Space Exploration
####################
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# load
load("output/ParameterExploration/Rdata/FixedDelta06_SigmaSlopeExploration.Rdata")
improve <- improve %>%
mutate(relativePercInc = (PercIncrease - 1.220554) / 1.220554,
relativeSlope   = (SlopeIncrease - 0.02322321) / 0.02322321,
relativeLarge   = (SpecLarge - 0.5915000) / 0.5915000,
relativeSmall   = (SpecSmall - 0.2663750) / 0.2663750,
Increase        = SlopeIncrease * 14) %>%
mutate(fit = (abs(relativeLarge) + abs(relativeSmall) + abs(relativeSlope)) / 3)
library(RColorBrewer)
library(scales)
library(ggthemes)
# Load and prep experimental data
source("scripts/3A_PrepPlotExperimentData.R")
yukoCorr <- yukoCorr %>%
mutate(Sigma = NA)
# Load and prep fixed probabilistic sigma = 0.1
load("output/__RData/FixedDelta06Sigma01Eta7100reps.Rdata")
taskCorrTot <- do.call("rbind", groups_taskCorr)
fixedprob_01 <-  taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(Sigma = 0.1,
Source = "Model") %>%
select(n, TaskMean, Source, Sigma)
# Load and prep fixed probabilistic sigma = 0.15
load("output/__RData/Fixed_Delta06Sigma005Eta25.Rdata")
taskCorrTot <- do.call("rbind", groups_taskCorr)
fixedprob_005 <-  taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(Sigma = 0.05,
Source = "Model") %>%
select(n, TaskMean, Source, Sigma)
# Load and prep fixed probabilistic sigma = 0.02
load("output/__RData/Fixed_Delta06Sigma002Eta7.Rdata")
taskCorrTot <- do.call("rbind", groups_taskCorr)
fixedprob_002 <-  taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(Sigma = 0.02,
Source = "Model") %>%
select(n, TaskMean, Source, Sigma)
# Load and prep fixed probabilistic sigma = 0.3, eta = 2
load("output/__RData/Fixed_Delta06Sigma03.Rdata")
taskCorrTot <- do.call("rbind", groups_taskCorr)
fixedprob_03 <-  taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(Sigma = 0.3,
Source = "Model") %>%
select(n, TaskMean, Source, Sigma)
# Bind into large dataframe
allFixedProbCorr <- fixedprob_01 %>%
rbind(fixedprob_002) %>%
rbind(fixedprob_015) %>%
rbind(fixedprob_03) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source)) %>%
group_by(Source, n, Sigma) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE) %>%
mutate(Set = paste0(Source, Sigma)) %>%
mutate(Set = factor(Set, levels = c("ExperimentNA", "Model0.02", "Model0.1", "Model0.15", "Model0.3")))
allFixedProbCorr <- fixedprob_01 %>%
rbind(fixedprob_002) %>%
rbind(fixedprob_005) %>%
rbind(fixedprob_03) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source)) %>%
group_by(Source, n, Sigma) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE) %>%
mutate(Set = paste0(Source, Sigma)) %>%
mutate(Set = factor(Set, levels = c("ExperimentNA", "Model0.02", "Model0.3", "Model0.1", "Model0.05")))
fixedProbpalette <- c("grey45", "#F9D76E", "#F23619", "#97031B", "#FD792C")
fillPalette <- c("#ffffff","#F9D76E", "#F23619", "#97031B", "#FD792C")
gg_fixedProb <- ggplot(data = allFixedProbCorr) +
theme_classic() +
labs(x = "Group Size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.1),
limits = c(0, 0.85),
expand = c(0, 0)) +
scale_colour_manual(values = fixedProbpalette,
labels = c("Experiment",
expression(paste(sigma, " = 0.02, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")),
expression(paste(sigma, " = 0.05, ", eta, " = 25")))) +
scale_fill_manual(values = fillPalette,
labels = c("Experiment",
expression(paste(sigma, " = 0.02, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")),
expression(paste(sigma, " = 0.05, ", eta, " = 25")))) +
scale_shape_manual(values = c(21, 22, 21, 25, 24),
labels = c("Experiment",
expression(paste(sigma, " = 0.02, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")),
expression(paste(sigma, " = 0.05, ", eta, " = 25")))) +
# Mean and SE portion of plot
geom_errorbar(aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Set, width = 1.5),
position = position_dodge(width = 0.5),
size = 0.25) +
geom_line(aes(x = n, y = SpecMean,  colour = Set),
size = 0.3,
position = position_dodge(width = 0.5)) +
geom_point(aes(x = n, y = SpecMean, colour = Set, fill = Set, shape = Set),
position = position_dodge(width = 0.5),
size = 1.5) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 6, margin = margin(5, 6, 5, -2)),
axis.text.x = element_text(size = 6, margin = margin(6, 5, -2, 5)),
axis.title = element_text(size = 6, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"))
gg_fixedProb
fixedProbpalette <- c("grey45", "#F9D76E", "#FD792C", "#F23619", "#97031B")
fillPalette <- c("#ffffff","#F9D76E", "#FD792C", "#F23619", "#97031B")
gg_fixedProb <- ggplot(data = allFixedProbCorr) +
theme_classic() +
labs(x = "Group Size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.1),
limits = c(0, 0.85),
expand = c(0, 0)) +
scale_colour_manual(values = fixedProbpalette,
labels = c("Experiment",
expression(paste(sigma, " = 0.02, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")),
expression(paste(sigma, " = 0.05, ", eta, " = 25")))) +
scale_fill_manual(values = fillPalette,
labels = c("Experiment",
expression(paste(sigma, " = 0.02, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")),
expression(paste(sigma, " = 0.05, ", eta, " = 25")))) +
scale_shape_manual(values = c(21, 22, 21, 25, 24),
labels = c("Experiment",
expression(paste(sigma, " = 0.02, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")),
expression(paste(sigma, " = 0.05, ", eta, " = 25")))) +
# Mean and SE portion of plot
geom_errorbar(aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Set, width = 1.5),
position = position_dodge(width = 0.5),
size = 0.25) +
geom_line(aes(x = n, y = SpecMean,  colour = Set),
size = 0.3,
position = position_dodge(width = 0.5)) +
geom_point(aes(x = n, y = SpecMean, colour = Set, fill = Set, shape = Set),
position = position_dodge(width = 0.5),
size = 1.5) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 6, margin = margin(5, 6, 5, -2)),
axis.text.x = element_text(size = 6, margin = margin(6, 5, -2, 5)),
axis.title = element_text(size = 6, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"))
gg_fixedProb
View(improve)
gg_fixedProb
svg("output/MSFigures/FixedProbSpecializationFits.svg", width = 2.71, height = 2.05)
gg_fixedProb
dev.off()
