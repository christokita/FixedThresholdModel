groups_specialization <- rbind(groups_specialization, to_return)
}
# Calculate Entropy
entropy <- mutualEntropy(TotalStateMat = X_tot)
entropy <- transform(entropy, n = n, replicate = sim)
# Calculate total task distribution
# totalTaskDist <- X_tot / rowSums(X_tot)
totalTaskDist <- X_tot / gens
totalTaskDist <- transform(totalTaskDist, Inactive = gens - rowSums(X_tot), n = n, replicate = sim)
totalTaskDist$individual <- paste0("v-", 1:nrow(totalTaskDist))
# Create tasktally table
taskTally <- do.call("rbind", taskTally)
# Create tasktally table
stimMat <- transform(stimMat, n = n, replicate = sim)
# Create tasktally table
taskCorr <- transform(taskCorr, replicate = sim)
# Add total task distributions, entropy values, and graphs to lists
ens_taskDist[[sim]]  <- totalTaskDist
ens_entropy[[sim]]   <- entropy
ens_taskCorr[[sim]]  <- taskCorr
ens_taskTally[[sim]] <- taskTally
ens_taskStep[[sim]]  <- taskStep
ens_stim[[sim]]      <- stimMat
ens_taskOverTime[[sim]] <- as.data.frame(taskOverTime)
# Print simulation completed
print(paste0("DONE: N = ", n, ", Simulation ", sim))
}
# Calculate mean correlation for each n
runCorrs <- lapply(ens_taskCorr, function(x) {
# Unlist
runs <- do.call("rbind", x)
replicate <- runs[nrow(runs), ]
replicate <- unique(replicate)
runs <- runs[-nrow(runs), ]
# Calculate mean
runMean <- matrix(data = rep(NA, m), ncol =  m)
for (column in 1:m) {
runMean[ , column] <- mean(runs[ , column], na.rm = TRUE)
}
runMean <- cbind(runMean, replicate)
colnames(runMean) <- c("Task1", "Task2", "replicate")
return(runMean)
})
runCorrs <- do.call("rbind", runCorrs)
runCorrs <- transform(runCorrs, n = n)
# Add to list of lists
groups_taskDist[[i]]  <- ens_taskDist
groups_taskCorr[[i]]  <- runCorrs
groups_taskStep[[i]]  <- ens_taskStep
groups_taskTally[[i]] <- ens_taskTally
groups_stim[[i]]      <- ens_stim
groups_entropy[[i]]   <- ens_entropy
groups_taskOverTime[[i]] <- ens_taskOverTime
}
# trim out correlations for group size 1
if(1 %in% Ns) {
groups_taskCorr <- groups_taskCorr[-1]
}
####################
# Save all
####################
save(groups_entropy, groups_stim, groups_taskCorr, groups_taskDist,
groups_taskStep, groups_taskTally, groups_specialization, groups_taskOverTime,
file = paste0("output/SpecializationMetrics/Rdata/", filename, "100reps.Rdata"))
source('~/Documents/Research/Tarnita Lab/Self-Organized DOL/Network Model/NetworkModel-R/scripts/1A_ProbThreshModelWithSpecialMetric.R', echo=TRUE)
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06Sigma01Eta7_Sigma0Eta2100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Model vs Data Palette
compPalette <- c("indianred2", "black")
####################
# Final task distributions
####################
# Bind together
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
# Manipulate
taskDistTot <- taskDistTot %>%
mutate(set = paste0(n, "-", replicate)) %>%
mutate(set = factor(set,
levels = mixedsort(unique(set))),
n = as.factor(n))
taskSum <- taskDistTot %>%
group_by(n) %>%
summarise(taskMean1 = mean(Task1),
taskMean2 = mean(Task2))
# Plot
plot_TaskMat <- as.data.frame(taskDistTot)
gg_dist <- ggplot(data = plot_TaskMat, aes(y = Task1, x = set)) +
geom_point(aes(colour = n), size = 0.3) +
theme_classic() +
labs(x = "Group size",
y = "Task 1 frequency") +
scale_color_manual(values = palette) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme(axis.text.x = element_text(size = 0),
axis.ticks.x = element_blank(),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.title.x = element_text(size = 10, margin = margin(12, 0, 0, 0)),
legend.position = "none")
gg_dist
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06Sigma01Eta7_Sigma0Eta30100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Model vs Data Palette
compPalette <- c("indianred2", "black")
####################
# Final task distributions
####################
# Bind together
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
# Manipulate
taskDistTot <- taskDistTot %>%
mutate(set = paste0(n, "-", replicate)) %>%
mutate(set = factor(set,
levels = mixedsort(unique(set))),
n = as.factor(n))
taskSum <- taskDistTot %>%
group_by(n) %>%
summarise(taskMean1 = mean(Task1),
taskMean2 = mean(Task2))
# Plot
plot_TaskMat <- as.data.frame(taskDistTot)
gg_dist <- ggplot(data = plot_TaskMat, aes(y = Task1, x = set)) +
geom_point(aes(colour = n), size = 0.3) +
theme_classic() +
labs(x = "Group size",
y = "Task 1 frequency") +
scale_color_manual(values = palette) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme(axis.text.x = element_text(size = 0),
axis.ticks.x = element_blank(),
axis.text = element_text(size = 8),
axis.title.y = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.title.x = element_text(size = 10, margin = margin(12, 0, 0, 0)),
legend.position = "none")
gg_dist
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06Sigma01Eta7_PerCap100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Model vs Data Palette
compPalette <- c("indianred2", "black")
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Source = "Model") %>%
select(n, TaskMean, Source) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source))
# Calculate means and SE
taskCorrMeans <- taskCorrTot %>%
group_by(Source, n) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE)
# Plot
gg_corr <- ggplot() +
geom_hline(data = taskCorrTot,
aes(yintercept = 0),
colour = "grey30") +
geom_point(data = taskCorrTot,
aes(x = n, y = TaskMean, fill = Source, colour = Source),
size = 0.9,
position = position_dodge(width = 1),
alpha = 0.4,
stroke = 0) +
theme_classic() +
labs(x = "Group size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.2)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0))) +
# Mean and SE portion of plot
geom_errorbar(data = taskCorrMeans,
aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Source),
width = 1.5,
position = position_dodge(width = 1)) +
geom_point(data = taskCorrMeans,
aes(x = n, y = SpecMean, colour = Source, fill = Source),
position = position_dodge(width = 1),
size = 2) +
geom_line(data = taskCorrMeans,
aes(x = n, y = SpecMean,  colour = Source),
position = position_dodge(width = 1))
gg_corr
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06Sigma01Eta7_Sigma0Eta2100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Source = "Model") %>%
select(n, TaskMean, Source) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source))
# Calculate means and SE
taskCorrMeans <- taskCorrTot %>%
group_by(Source, n) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE)
# Plot
gg_corr <- ggplot() +
geom_hline(data = taskCorrTot,
aes(yintercept = 0),
colour = "grey30") +
geom_point(data = taskCorrTot,
aes(x = n, y = TaskMean, fill = Source, colour = Source),
size = 0.9,
position = position_dodge(width = 1),
alpha = 0.4,
stroke = 0) +
theme_classic() +
labs(x = "Group size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.2)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0))) +
# Mean and SE portion of plot
geom_errorbar(data = taskCorrMeans,
aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Source),
width = 1.5,
position = position_dodge(width = 1)) +
geom_point(data = taskCorrMeans,
aes(x = n, y = SpecMean, colour = Source, fill = Source),
position = position_dodge(width = 1),
size = 2) +
geom_line(data = taskCorrMeans,
aes(x = n, y = SpecMean,  colour = Source),
position = position_dodge(width = 1))
gg_corr
# Model vs Data Palette
compPalette <- c("indianred2", "black")
gg_corr
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06Sigma01Eta7_Sigma0Eta30100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Model vs Data Palette
compPalette <- c("indianred2", "black")
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Source = "Model") %>%
select(n, TaskMean, Source) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source))
# Calculate means and SE
taskCorrMeans <- taskCorrTot %>%
group_by(Source, n) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE)
# Plot
gg_corr <- ggplot() +
geom_hline(data = taskCorrTot,
aes(yintercept = 0),
colour = "grey30") +
geom_point(data = taskCorrTot,
aes(x = n, y = TaskMean, fill = Source, colour = Source),
size = 0.9,
position = position_dodge(width = 1),
alpha = 0.4,
stroke = 0) +
theme_classic() +
labs(x = "Group size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.2)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0))) +
# Mean and SE portion of plot
geom_errorbar(data = taskCorrMeans,
aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Source),
width = 1.5,
position = position_dodge(width = 1)) +
geom_point(data = taskCorrMeans,
aes(x = n, y = SpecMean, colour = Source, fill = Source),
position = position_dodge(width = 1),
size = 2) +
geom_line(data = taskCorrMeans,
aes(x = n, y = SpecMean,  colour = Source),
position = position_dodge(width = 1))
gg_corr
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06Sigma01Eta7_Sigma0Eta2100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
# Palette without single individuals
palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
####################
# Task Rank Correlation
####################
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
select(n, TaskMean, Set)
####################
# Stimulus Fluctuation
####################
# Unlist
stims <- unlist(groups_stim, recursive = FALSE)
stims <- do.call("rbind", stims)
#### 200 Time steps ####
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 200) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
#### 1 Time steps ####
# stimFluct <- stims %>%
#   select(-delta1, -delta2) %>%
#   mutate(Set = paste0(n, "-", replicate)) %>%
#   group_by(Set) %>%
#   mutate(t = 0:(length(Set)-1)) %>%
#   mutate(Window = t %/% 1) %>%
#   filter(t != 0) %>%
#   group_by(n, Set, Window) %>%
#   summarise(s1 = mean(s1),
#             s2 = mean(s2)) %>%
#   mutate(s1Diff = abs(s1 - lag(s1)),
#          s2Diff = abs(s2 - lag(s2)),
#          BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
stimFluct = (s1Fluct + s2Fluct) / 2)
####################
# Task Performance Fluctuation
####################
# Unlist
tallies <- unlist(groups_taskTally, recursive = FALSE)
tallies <- do.call("rbind", tallies)
#### 200 Time steps ####
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
# tallyFluct <- tallies %>%
#   mutate(Task1 = Task1 / n,
#          Task2 = Task2 / n,
#          Inactive = Inactive / n,
#          Set = paste0(n, "-", replicate),
#          Window = t %/% 200) %>%
#   group_by(n, Set, Window) %>%
#   summarise(Task1 = mean(Task1),
#             Task2 = mean(Task2),
#             Inactive = mean(Inactive)) %>%
#   mutate(Task1Diff = abs(Task1 - lag(Task1)),
#          Task2Diff = abs(Task2 - lag(Task2)),
#          InactiveDiff = abs(Inactive - lag(Inactive)),
#          BeginSet = !duplicated(Set))
#### 1 Time steps ####
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 200) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
# Summarise by colony/set
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))),
taskFluct = (Task1Fluct + Task2Fluct) / 2)
####################
# Merge and plot
####################
# Merge
merged_specstim <- merge(taskCorrTot, stimFluct, by = c("Set", "n"))
merged_specstim <- merge(merged_specstim, tallyFluct, by = c("Set", "n"))
# Plot - Stimulus vs Specialization total
gg_compareTot <- gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette, name = "Group Size") +
xlab("Task Correlation") +
ylab("Stim 1 Fluctuations")
gg_compareTot
# Plot - Stimulus vs Specialization by Group Size
gg_compare <- ggplot(merged_specstim, aes(x = TaskMean, y = s1Fluct, colour = as.factor(n))) +
geom_point() +
theme_classic() +
scale_color_manual(values = palette) +
theme(legend.position = "none") +
facet_wrap(~ n, scales = "free") +
xlab("Task Correlation") +
ylab("Stim 1 Fluctuations")
gg_compare
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06Sigma01Eta7_Sigma0Eta30100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
groups_taskOverTime
plot(groups_stim[[2]][1])
plot(groups_stim[[2]][[1]])
groups_stim([[2]][[1]])
groups_stim([[2]][1])
groups_stim[[2]][1]
look <- groups_stim[[2]][[1]]
plot(look$s1)
plot(look$s1, type = "l")
look <- groups_taskOverTime[[2]][[1]]
look
plot(look)
plot(look[,1])
plot(look[1:1000,1], type = "l")
look[,3] <- look[,1] == look[,2]
look[,3]
look[,3] <- look[,1] == look[,2] & look[,1] != 0
look[,3]
plot(look[,3], type = "l")
plot(look[1:1000,3], type = "l")
look <- groups_stim[[6]][[1]]
plot(look[1:1000,1], type = "l")
look <- groups_stim[[2]][[1]]
plot(look[1:1000,1], type = "l")
