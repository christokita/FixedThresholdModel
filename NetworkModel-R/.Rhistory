#### 200 Time steps ####
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
tallyFluct <- tallies %>%
mutate(Task1 = Task1 / n,
Task2 = Task2 / n,
Inactive = Inactive / n,
Set = paste0(n, "-", replicate),
Window = t %/% 1) %>%
group_by(n, Set, Window) %>%
summarise(Task1 = mean(Task1),
Task2 = mean(Task2),
Inactive = mean(Inactive)) %>%
mutate(Task1Diff = abs(Task1 - lag(Task1)),
Task2Diff = abs(Task2 - lag(Task2)),
InactiveDiff = abs(Inactive - lag(Inactive)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(tallyFluct$BeginSet == TRUE)
tallyFluct$Task1Diff[sets] <- NA
tallyFluct$Task2Diff[sets] <- NA
tallyFluct$InactiveDiff[sets] <- NA
# Summarise by colony/set
tallyFluct <- tallyFluct %>%
group_by(n, Set) %>%
summarise(Task1Fluct = mean(Task1Diff, na.rm = TRUE),
Task2Fluct = mean(Task2Diff, na.rm = TRUE),
InactiveFluct = mean(InactiveDiff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))))
# Summarise by n
tallySumFluct <- tallyFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(Task1FluctMean = mean(Task1Fluct, na.rm = TRUE),
Task1FluctSE = sd(Task1Fluct) / sqrt(length(Task1Fluct)),
Task2FluctMean = mean(Task2Fluct, na.rm = TRUE),
Task2FluctSE = sd(Task2Fluct, na.rm = TRUE) / sqrt(length(Task2Fluct)),
InactiveFluctMean = mean(InactiveFluct, na.rm = TRUE),
InactiveFluctSE = sd(InactiveFluct, na.rm = TRUE) / sqrt(length(InactiveFluct)))
tallySumFluct <- as.data.frame(tallySumFluct)
tallySumFluct <- tallySumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
# Plot
gg_fluct <- ggplot() +
geom_point(data = tallyFluct,
aes(x = n, y = Task1Fluct),
fill = "grey50",
colour = "grey50",
size = 0.7,
position = position_jitter(width = 0.1),
alpha = 0.4,
stroke = 0) +
theme_classic() +
labs(x = "Group size",
y = "Task fluctuation") +
scale_x_continuous(breaks = unique(tallyFluct$n)) +
# scale_y_continuous(breaks = seq(0, 0.22, 0.02),
#                    limits = c(0, 0.155),
#                    expand = c(0, 0)) +
theme(legend.position = "none") +
# Mean and SE portion of plot
geom_errorbar(data = tallySumFluct,
aes(x = n,
ymin = Task1FluctMean - Task1FluctSE,
ymax = Task1FluctMean + Task1FluctSE),
colour= "black",
size = 0.25) +
geom_point(data = tallySumFluct,
aes(x = n, y = Task1FluctMean),
colour = "black",
size = 1.5) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))
gg_fluct
ggsave("output/FitnessPlots/TaskFluctuations_1TimeStep.png",  width = 2, height = 2, dpi = 800)
stims <- unlist(groups_stim, recursive = FALSE)
stims <- do.call("rbind", stims)
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 1) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))))
# Summarise by n
stimSumFluct <- stimFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(s1FluctMean = mean(s1Fluct, na.rm = TRUE),
s1FluctSE = sd(s1Fluct, na.rm = TRUE) / sqrt(length(s1Fluct)),
s2FluctMean = mean(s2Fluct, na.rm = TRUE),
s2FluctSE = sd(s2Fluct, na.rm = TRUE) / sqrt(length(s2Fluct)))
stimSumFluct <- as.data.frame(stimSumFluct)
stimSumFluct <- stimSumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
# Plot
gg_stimfluct <- ggplot() +
geom_point(data = stimFluct,
aes(x = n, y = s1Fluct),
fill = "grey50",
colour = "grey50",
position = position_jitter(width = 0.1),
size = 0.7,
alpha = 0.4,
stroke = 0) +
# geom_line(data = stimSumFluct,
#           aes(x = n, y = s1FluctMean),
#           size = 0.3) +���
theme_classic() +
labs(x = "Group size",
y = "Stimulus fluctuation") +
scale_x_continuous(breaks = unique(stimFluct$n)) +
scale_y_continuous(breaks = seq(0, 2, 0.2),
limits = c(0, 0.85),
expand = c(0, 0)) +
theme(legend.position = "none") +
# Mean and SE portion of plot
geom_errorbar(data = stimSumFluct,
aes(x = n,
ymin = s1FluctMean - s1FluctSE,
ymax = s1FluctMean + s1FluctSE),
colour = "black",
size = 0.25) +
geom_point(data = stimSumFluct,
aes(x = n, y = s1FluctMean),
colour = "black",
size = 1.5) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))
gg_stimfluct
ggsave("output/FitnessPlots/StimuFluctuations_1TimeSteps.png",  width = 2, height = 2, dpi = 800)
# Normalize and Summarise by "day" (i.e., time window) and calculate difference
stimFluct <- stims %>%
select(-delta1, -delta2) %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(t = 0:(length(Set)-1)) %>%
mutate(Window = t %/% 1) %>%
filter(t != 0) %>%
group_by(n, Set, Window) %>%
summarise(s1 = mean(s1),
s2 = mean(s2)) %>%
mutate(s1Diff = abs(s1 - lag(s1)),
s2Diff = abs(s2 - lag(s2)),
BeginSet = !duplicated(Set))
# Make sure first diff row of each new set is NA
sets <- which(stimFluct$BeginSet == TRUE)
stimFluct$s1Diff[sets] <- NA
stimFluct$s2Diff[sets] <- NA
# Summarise by colony/set
stimFluct <- stimFluct %>%
group_by(n, Set) %>%
summarise(s1Fluct = mean(s1Diff, na.rm = TRUE),
s2Fluct = mean(s2Diff, na.rm = TRUE)) %>%
mutate(GroupSizeFactor = factor(n, levels = sort(unique(n))))
# Summarise by n
stimSumFluct <- stimFluct %>%
group_by(n, GroupSizeFactor) %>%
summarise(s1FluctMean = mean(s1Fluct, na.rm = TRUE),
s1FluctSE = sd(s1Fluct, na.rm = TRUE) / sqrt(length(s1Fluct)),
s2FluctMean = mean(s2Fluct, na.rm = TRUE),
s2FluctSE = sd(s2Fluct, na.rm = TRUE) / sqrt(length(s2Fluct)))
stimSumFluct <- as.data.frame(stimSumFluct)
stimSumFluct <- stimSumFluct %>%
mutate(GroupSizeFactor = factor(GroupSizeFactor, levels = sort(unique(n))))
# Plot
gg_stimfluct <- ggplot() +
geom_point(data = stimFluct,
aes(x = n, y = s1Fluct),
fill = "grey50",
colour = "grey50",
position = position_jitter(width = 0.1),
size = 0.7,
alpha = 0.4,
stroke = 0) +
# geom_line(data = stimSumFluct,
#           aes(x = n, y = s1FluctMean),
#           size = 0.3) +���
theme_classic() +
labs(x = "Group size",
y = "Stimulus fluctuation") +
scale_x_continuous(breaks = unique(stimFluct$n)) +
scale_y_continuous(breaks = seq(0, 2, 0.2),
limits = c(0, 0.85),
expand = c(0, 0)) +
theme(legend.position = "none") +
# Mean and SE portion of plot
geom_errorbar(data = stimSumFluct,
aes(x = n,
ymin = s1FluctMean - s1FluctSE,
ymax = s1FluctMean + s1FluctSE),
colour = "black",
size = 0.25) +
geom_point(data = stimSumFluct,
aes(x = n, y = s1FluctMean),
colour = "black",
size = 1.5) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))
gg_stimfluct
ggsave("output/FitnessPlots/StimuFluctuations_1TimeSteps.png",  width = 2, height = 2, dpi = 800)
gg_fluct <- ggplot() +
geom_point(data = tallyFluct,
aes(x = n, y = Task1Fluct),
fill = "grey50",
colour = "grey50",
size = 0.7,
position = position_jitter(width = 0.1),
alpha = 0.4,
stroke = 0) +
theme_classic() +
labs(x = "Group size",
y = "Task fluctuation") +
scale_x_continuous(breaks = unique(tallyFluct$n)) +
# scale_y_continuous(breaks = seq(0, 0.22, 0.02),
#                    limits = c(0, 0.155),
#                    expand = c(0, 0)) +
theme(legend.position = "none") +
# Mean and SE portion of plot
geom_errorbar(data = tallySumFluct,
aes(x = n,
ymin = Task1FluctMean - Task1FluctSE,
ymax = Task1FluctMean + Task1FluctSE),
colour= "black",
size = 0.25) +
geom_point(data = tallySumFluct,
aes(x = n, y = Task1FluctMean),
colour = "black",
size = 1.5) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))
gg_fluct
gg_fluct <- ggplot() +
geom_point(data = tallyFluct,
aes(x = n, y = Task1Fluct),
fill = "grey50",
colour = "grey50",
size = 0.7,
position = position_jitter(width = 0.1),
alpha = 0.4,
stroke = 0) +
theme_classic() +
labs(x = "Group size",
y = "Task fluctuation") +
scale_x_continuous(breaks = unique(tallyFluct$n)) +
scale_y_continuous(breaks = seq(0, 0.22, 0.02),
limits = c(0, 0.155),
expand = c(0, 0)) +
theme(legend.position = "none") +
# Mean and SE portion of plot
geom_errorbar(data = tallySumFluct,
aes(x = n,
ymin = Task1FluctMean - Task1FluctSE,
ymax = Task1FluctMean + Task1FluctSE),
colour= "black",
size = 0.25) +
geom_point(data = tallySumFluct,
aes(x = n, y = Task1FluctMean),
colour = "black",
size = 1.5) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))
gg_fluct
ggsave("output/FitnessPlots/TaskFluctuations_1TimeStep.png",  width = 2, height = 2, dpi = 800)
################################################################################
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/FixedDelta06Sigma01Eta7100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Model vs Data Palette
compPalette <- c("indianred2", "black")
# Prep
taskVarMean <- taskDistTot %>%
mutate(n = as.character(n)) %>%
mutate(n = as.numeric(n)) %>%
group_by(n, replicate) %>%
summarise(SD1 = sd(Task1),
SD2 = sd(Task2),
Mean = mean(Task1)) %>%
mutate(Source = "Model",
SD = (SD1 + SD2) / 2)
taskVarMean$SD[is.na(taskVarMean$SD)] <- 0 #fix for single individuals
taskVarMean <- rbind(taskVarMean, yukoDataSummary)
# Calculate means and SE
taskVarMeans <- taskVarMean %>%
group_by(n, Source) %>%
summarise(MeanMean = mean(Mean),
MeanSE = sd(Mean) / sqrt(length(Mean)),
SDMean = mean(SD),
SDSE = sd(SD) / sqrt(length(SD)))
# Get mean at group size one and normalize
expSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == "Experiment"]
modSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == "Model"]
expSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == "Experiment"]
modSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == "Model"]
# Normalize Mean Values
taskVarMeans$NormMean <- NA
taskVarMeans$NormMeanSE <- NA
taskVarMeans$NormMean[taskVarMeans$Source == "Experiment"] <- taskVarMeans$MeanMean[taskVarMeans$Source == "Experiment"] / expSizeOne
taskVarMeans$NormMean[taskVarMeans$Source == "Model"] <- taskVarMeans$MeanMean[taskVarMeans$Source == "Model"] / modSizeOne
taskVarMeans$NormMeanSE[taskVarMeans$Source == "Experiment"] <- taskVarMeans$MeanSE[taskVarMeans$Source == "Experiment"] / expSizeOne
taskVarMeans$NormMeanSE[taskVarMeans$Source == "Model"] <- taskVarMeans$MeanSE[taskVarMeans$Source == "Model"] / modSizeOne
taskVarMean$NormMean <- NA
taskVarMean$NormMean[taskVarMean$Source == "Experiment"] <- taskVarMean$Mean[taskVarMean$Source == "Experiment"] / expSizeOne
taskVarMean$NormMean[taskVarMean$Source == "Model"] <- taskVarMean$Mean[taskVarMean$Source == "Model"] / modSizeOne
# Normalize behavioral variation values
taskVarMeans$NormVarMean <- NA
taskVarMeans$NormVarMeanSE <- NA
taskVarMeans$NormVarMean[taskVarMeans$Source == "Experiment"] <- taskVarMeans$SDMean[taskVarMeans$Source == "Experiment"] / expSizeSixteen
taskVarMeans$NormVarMean[taskVarMeans$Source == "Model"] <- taskVarMeans$SDMean[taskVarMeans$Source == "Model"] / modSizeSixteen
taskVarMeans$NormVarMeanSE[taskVarMeans$Source == "Experiment"] <- taskVarMeans$SDSE[taskVarMeans$Source == "Experiment"] / expSizeSixteen
taskVarMeans$NormVarMeanSE[taskVarMeans$Source == "Model"] <- taskVarMeans$SDSE[taskVarMeans$Source == "Model"] / modSizeSixteen
taskVarMean$NormVarMean <- NA
taskVarMean$NormVarMean[taskVarMean$Source == "Experiment"] <- taskVarMean$SD[taskVarMean$Source == "Experiment"] / expSizeSixteen
taskVarMean$NormVarMean[taskVarMean$Source == "Model"] <- taskVarMean$SD[taskVarMean$Source == "Model"] / modSizeSixteen
# Plot variance and mean by group size
# gg_var <- ggplot() +
#   geom_point(data = taskVarMean,
#              aes(x = n, y = SD, colour = Source),
#              size = 0.5,
#              alpha = 0.4,
#              position = position_dodge(width = 1)) +
#   theme_classic() +
#   xlab("Group size") +
#   ylab("Behavioral Variation (SD)") +
#   scale_x_continuous(breaks = unique(taskVarMean$n)) +
#   scale_y_continuous(breaks = seq(0, 1, 0.025)) +
#   # Mean and SE portion of plot
#   geom_errorbar(data = taskVarMeans,
#                 aes(x = n, ymin = SDMean - SDSE, ymax = SDMean + SDSE, colour = Source, width = 1.5),
#                 position = position_dodge(width = 1)) +
#   geom_point(data = taskVarMeans,
#              aes(x = n, y = SDMean, colour = Source),
#              size = 2,
#              position = position_dodge(width = 1)) +
#   geom_line(data = taskVarMeans,
#             aes(x = n, y = SDMean, colour = Source),
#             position = position_dodge(width = 1)) +
#   scale_fill_manual(values = compPalette) +
#   scale_colour_manual(values = compPalette) +
#   theme(legend.position = "none",
#         axis.text = element_text(size = 8),
#         axis.title = element_text(size = 10))
gg_varNorm <- ggplot() +
geom_hline(data = taskVarMean,
aes(yintercept = 1),
colour = "grey30") +
geom_point(data = taskVarMean,
aes(x = n, y = NormVarMean, colour = Source),
size = 0.8,
alpha = 0.4,
position = position_dodge(width = 1)) +
theme_classic() +
xlab("Group size") +
ylab("Relative behavioral variation") +
scale_x_continuous(breaks = unique(taskVarMean$n)) +
scale_y_continuous(breaks = seq(0, 3, 0.5)) +
# Mean and SE portion of plot
geom_errorbar(data = taskVarMeans,
aes(x = n, ymin = NormVarMean - NormVarMeanSE, ymax = NormVarMean + NormVarMeanSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskVarMeans,
aes(x = n, y = NormVarMean, colour = Source),
size = 2,
position = position_dodge(width = 1)) +
geom_line(data = taskVarMeans,
aes(x = n, y = NormVarMean, colour = Source),
position = position_dodge(width = 1)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))
# Bind together
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
taskVarMean <- taskDistTot %>%
mutate(n = as.character(n)) %>%
mutate(n = as.numeric(n)) %>%
group_by(n, replicate) %>%
summarise(SD1 = sd(Task1),
SD2 = sd(Task2),
Mean = mean(Task1)) %>%
mutate(Source = "Model",
SD = (SD1 + SD2) / 2)
taskVarMean$SD[is.na(taskVarMean$SD)] <- 0 #fix for single individuals
taskVarMean <- rbind(taskVarMean, yukoDataSummary)
taskVarMeans <- taskVarMean %>%
group_by(n, Source) %>%
summarise(MeanMean = mean(Mean),
MeanSE = sd(Mean) / sqrt(length(Mean)),
SDMean = mean(SD),
SDSE = sd(SD) / sqrt(length(SD)))
expSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == "Experiment"]
modSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == "Model"]
expSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == "Experiment"]
modSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == "Model"]
taskVarMeans$NormMean <- NA
taskVarMeans$NormMeanSE <- NA
taskVarMeans$NormMean[taskVarMeans$Source == "Experiment"] <- taskVarMeans$MeanMean[taskVarMeans$Source == "Experiment"] / expSizeOne
taskVarMeans$NormMean[taskVarMeans$Source == "Model"] <- taskVarMeans$MeanMean[taskVarMeans$Source == "Model"] / modSizeOne
taskVarMeans$NormMeanSE[taskVarMeans$Source == "Experiment"] <- taskVarMeans$MeanSE[taskVarMeans$Source == "Experiment"] / expSizeOne
taskVarMeans$NormMeanSE[taskVarMeans$Source == "Model"] <- taskVarMeans$MeanSE[taskVarMeans$Source == "Model"] / modSizeOne
taskVarMean$NormMean <- NA
taskVarMean$NormMean[taskVarMean$Source == "Experiment"] <- taskVarMean$Mean[taskVarMean$Source == "Experiment"] / expSizeOne
taskVarMean$NormMean[taskVarMean$Source == "Model"] <- taskVarMean$Mean[taskVarMean$Source == "Model"] / modSizeOne
taskVarMeans$NormVarMean <- NA
taskVarMeans$NormVarMeanSE <- NA
taskVarMeans$NormVarMean[taskVarMeans$Source == "Experiment"] <- taskVarMeans$SDMean[taskVarMeans$Source == "Experiment"] / expSizeSixteen
taskVarMeans$NormVarMean[taskVarMeans$Source == "Model"] <- taskVarMeans$SDMean[taskVarMeans$Source == "Model"] / modSizeSixteen
taskVarMeans$NormVarMeanSE[taskVarMeans$Source == "Experiment"] <- taskVarMeans$SDSE[taskVarMeans$Source == "Experiment"] / expSizeSixteen
taskVarMeans$NormVarMeanSE[taskVarMeans$Source == "Model"] <- taskVarMeans$SDSE[taskVarMeans$Source == "Model"] / modSizeSixteen
taskVarMean$NormVarMean <- NA
taskVarMean$NormVarMean[taskVarMean$Source == "Experiment"] <- taskVarMean$SD[taskVarMean$Source == "Experiment"] / expSizeSixteen
taskVarMean$NormVarMean[taskVarMean$Source == "Model"] <- taskVarMean$SD[taskVarMean$Source == "Model"] / modSizeSixteen
gg_varNorm <- ggplot() +
geom_hline(data = taskVarMean,
aes(yintercept = 1),
colour = "grey30") +
geom_point(data = taskVarMean,
aes(x = n, y = NormVarMean, colour = Source),
size = 0.8,
alpha = 0.4,
position = position_dodge(width = 1)) +
theme_classic() +
xlab("Group size") +
ylab("Relative behavioral variation") +
scale_x_continuous(breaks = unique(taskVarMean$n)) +
scale_y_continuous(breaks = seq(0, 3, 0.5)) +
# Mean and SE portion of plot
geom_errorbar(data = taskVarMeans,
aes(x = n, ymin = NormVarMean - NormVarMeanSE, ymax = NormVarMean + NormVarMeanSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskVarMeans,
aes(x = n, y = NormVarMean, colour = Source),
size = 2,
position = position_dodge(width = 1)) +
geom_line(data = taskVarMeans,
aes(x = n, y = NormVarMean, colour = Source),
position = position_dodge(width = 1)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
axis.text = element_text(size = 8),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)))
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/NetworkModel-R/scripts/3_SinglePlotResults.R')
source('~/Documents/Research/Tarnita Lab/Evolution of DOL/Network Model/NetworkModel-R/scripts/Demonstration/3_SinglePlotResultsLargerSizes.R')
