mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1))) %>%
select(n, Set, minTask1, minTask2, maxTask1, maxTask2) %>%
unique()
####################
# Frequency of task not being performed vs. specialization
####################
# Load distribution
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2))
name(taskDistTot)
names(taskDistTot)
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2)) %>%
group_by(n) %>%
mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1))) %>%
select(-Task1, - Task2, -Inactive, -replicate, -individual) %>%
unique()
####################
# Frequency of task not being performed vs. specialization
####################
# Load distribution
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2)) %>%
group_by(n) %>%
mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1))) %>%
select(-Task1, - Task2, -Inactive, -replicate, -individual) %>%
unique()
# Merge
merged_specperf <- merge(merged_specperf, taskDistTot, by = c("Set", "n"))
normalizedNeglect <- merged_specperf %>%
mutate(noTaskAvg = noTaskAvg / 10000) %>%
group_by(n) %>%
mutate(noTaskAvgMin = min(noTaskAvg),
noTaskAvgMax = max(noTaskAvg),
TaskMeanMin = min(TaskMean),
TaskMeanMax = max(TaskMean)) %>%
mutate(noTaskAvgNorm = (noTaskAvg - noTaskAvgMin) / (noTaskAvgMax - noTaskAvgMin),
TaskMeanNorm = (TaskMean - TaskMeanMin) / (TaskMeanMax - TaskMeanMin))
# Plot
gg_min <- ggplot(data = normalizedNeglect, aes(x = maxTask2, y = TaskMeanNorm, colour = as.factor(n))) +
geom_point() +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized specialization") +
xlab("Min task 1 frequency") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
# scale_x_continuous(breaks = seq(-1, 1, 0.05),
#                    limits = c(0, 0.33),
#                    expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_min
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2)) %>%
group_by(n) %>%
mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1)))
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2)) %>%
group_by(n) %>%
mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1)))
View(taskDistTot)
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2)) %>%
group_by(n) %>%
mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1))) %>%
select(-Task1, - Task2, -Inactive, -replicate, -individual)
View(taskDistTot)
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2)) %>%
group_by(n) %>%
mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1))) %>%
select(-Task1, - Task2, -Inactive, -replicate, -individual) %>%
unique()
# Merge
merged_specperf <- merge(taskCorrTot, noTaskPerf, by = c("Set", "n"))
# Merge
merged_specperf <- merge(merged_specperf, taskDistTot, by = c("Set", "n"))
normalizedNeglect <- merged_specperf %>%
mutate(noTaskAvg = noTaskAvg / 10000) %>%
group_by(n) %>%
mutate(noTaskAvgMin = min(noTaskAvg),
noTaskAvgMax = max(noTaskAvg),
TaskMeanMin = min(TaskMean),
TaskMeanMax = max(TaskMean)) %>%
mutate(noTaskAvgNorm = (noTaskAvg - noTaskAvgMin) / (noTaskAvgMax - noTaskAvgMin),
TaskMeanNorm = (TaskMean - TaskMeanMin) / (TaskMeanMax - TaskMeanMin))
# Plot
gg_min <- ggplot(data = normalizedNeglect, aes(x = minTask1norm, y = TaskMeanNorm, colour = as.factor(n))) +
geom_point() +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized specialization") +
xlab("Min task 1 frequency") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
# scale_x_continuous(breaks = seq(-1, 1, 0.05),
#                    limits = c(0, 0.33),
#                    expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_min
# Merge
merged_specperf <- merge(taskCorrTot, noTaskPerf, by = c("Set", "n"))
####################
# Min/Max Task Performance vs. specialization
####################
# Load distribution
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2)) %>%
group_by(n) %>%
mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1)),
minTask2norm = (minTask2 - min(minTask2)) / (max(minTask2) - min(minTask2)),
maxTask1norm = (maxTask1 - min(maxTask1)) / (max(maxTask1) - min(maxTask1)),
maxTask2norm = (maxTask2 - min(maxTask2)) / (max(maxTask2) - min(maxTask2))) %>%
select(-Task1, - Task2, -Inactive, -replicate, -individual) %>%
unique()
# Merge
merged_specperf <- merge(merged_specperf, taskDistTot, by = c("Set", "n"))
normalizedNeglect <- merged_specperf %>%
mutate(noTaskAvg = noTaskAvg / 10000) %>%
group_by(n) %>%
mutate(noTaskAvgMin = min(noTaskAvg),
noTaskAvgMax = max(noTaskAvg),
TaskMeanMin = min(TaskMean),
TaskMeanMax = max(TaskMean)) %>%
mutate(noTaskAvgNorm = (noTaskAvg - noTaskAvgMin) / (noTaskAvgMax - noTaskAvgMin),
TaskMeanNorm = (TaskMean - TaskMeanMin) / (TaskMeanMax - TaskMeanMin))
# Plot
gg_min <- ggplot(data = normalizedNeglect, aes(x = maxTask1norm, y = TaskMeanNorm, colour = as.factor(n))) +
geom_point() +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized specialization") +
xlab("Min task 1 frequency") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
# scale_x_continuous(breaks = seq(-1, 1, 0.05),
#                    limits = c(0, 0.33),
#                    expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_min
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06_DetThreshWithSigmaDetUpdateDetQuit100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
####################
# Frequency of task not being performed
####################
noTaskPerf <- lapply(groups_taskTally, function(group_size) {
# Loop through replicates within group size
within_groupTaskPerf <- lapply(group_size, function(replicate) {
# Get basics and counts of instances in which there isn't anyone performing task
to_return <- data.frame(n = unique(replicate$n),
replicate = unique(replicate$replicate),
Set = paste0(unique(replicate$n), "-", unique(replicate$replicate)),
noTask1 = sum(replicate$Task1 == 0),
noTask2 = sum(replicate$Task2 == 0))
#  Quantify length of no-performance bouts
for (task in c("Task1", "Task2")) {
bout_lengths <- rle(replicate[ , task])
bout_lengths <- as.data.frame(do.call("cbind", bout_lengths))
bout_lengths <- bout_lengths %>%
filter(values == 0)
avg_nonPerformance <- mean(bout_lengths$lengths)
if(task == "Task1") {
to_return$noTask1Length = avg_nonPerformance
}
else {
to_return$noTask2Length = avg_nonPerformance
}
}
# Get averages
to_return <- to_return %>%
mutate(noTaskAvg = (noTask1 + noTask2) / 2,
noTaskLengthAvg = (noTask1Length + noTask2Length) / 2)
# Return
return(to_return)
})
# Bind and return
within_groupTaskPerf <- do.call("rbind", within_groupTaskPerf)
return(within_groupTaskPerf)
})
# Bind
noTaskPerf <- do.call("rbind", noTaskPerf)
Load specialization
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
taskCorrTot <- taskCorrTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
select(n, TaskMean, Task1, Task2, Set)
# Merge
merged_specperf <- merge(taskCorrTot, noTaskPerf, by = c("Set", "n"))
# Plot
gg_specPerf <- ggplot(data = merged_specperf) +
geom_point(aes(x = TaskMean, y = noTask1, colour = as.factor(n))) +
theme_classic() +
facet_wrap(~n, scales = "free") +
scale_color_manual(values = palette) +
theme(legend.position = "none") +
ylab("Instances of Task 1 Neglect") +
xlab("Rank Correlation")
gg_specPerf
# Normalized within group
normalizedNeglect <- merged_specperf %>%
mutate(noTaskAvg = noTaskAvg / 10000) %>%
group_by(n) %>%
mutate(noTaskAvgMin = min(noTaskAvg),
noTaskAvgMax = max(noTaskAvg),
TaskMeanMin = min(TaskMean),
TaskMeanMax = max(TaskMean)) %>%
mutate(noTaskAvgNorm = (noTaskAvg - noTaskAvgMin) / (noTaskAvgMax - noTaskAvgMin),
TaskMeanNorm = (TaskMean - TaskMeanMin) / (TaskMeanMax - TaskMeanMin))
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
gg_specPerfNorm <- ggplot(data = normalizedNeglect) +
geom_point(aes(x = TaskMeanNorm,
colour = as.factor(n),
y = noTaskAvgNorm),
# colour = "#F23619",
size = 0.5) +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized task neglect") +
xlab("Normalized specialization") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
scale_x_continuous(breaks = seq(-1, 1, 0.2),
expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_specPerfNorm
####################
# Min/Max Task Performance vs. specialization
####################
# Load distribution
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
taskDistTot <- taskDistTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
group_by(Set) %>%
mutate(minTask1 = min(Task1),
minTask2 = min(Task2),
maxTask1 = max(Task1),
maxTask2 = max(Task2)) %>%
group_by(n) %>%
mutate(minTask1norm = (minTask1 - min(minTask1)) / (max(minTask1) - min(minTask1)),
minTask2norm = (minTask2 - min(minTask2)) / (max(minTask2) - min(minTask2)),
maxTask1norm = (maxTask1 - min(maxTask1)) / (max(maxTask1) - min(maxTask1)),
maxTask2norm = (maxTask2 - min(maxTask2)) / (max(maxTask2) - min(maxTask2))) %>%
select(-Task1, - Task2, -Inactive, -replicate, -individual) %>%
unique()
# Merge
merged_specperf <- merge(merged_specperf, taskDistTot, by = c("Set", "n"))
normalizedNeglect <- merged_specperf %>%
mutate(noTaskAvg = noTaskAvg / 10000) %>%
group_by(n) %>%
mutate(noTaskAvgMin = min(noTaskAvg),
noTaskAvgMax = max(noTaskAvg),
TaskMeanMin = min(TaskMean),
TaskMeanMax = max(TaskMean)) %>%
mutate(noTaskAvgNorm = (noTaskAvg - noTaskAvgMin) / (noTaskAvgMax - noTaskAvgMin),
TaskMeanNorm = (TaskMean - TaskMeanMin) / (TaskMeanMax - TaskMeanMin))
# Plot
gg_min <- ggplot(data = normalizedNeglect, aes(x = maxTask1norm, y = TaskMeanNorm, colour = as.factor(n))) +
geom_point() +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized specialization") +
xlab("Min task 1 frequency") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
# scale_x_continuous(breaks = seq(-1, 1, 0.05),
#                    limits = c(0, 0.33),
#                    expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_min
# Plot
gg_min <- ggplot(data = normalizedNeglect, aes(x = minTask1norm, y = TaskMeanNorm, colour = as.factor(n))) +
geom_point() +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized specialization") +
xlab("Min task 1 frequency") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
# scale_x_continuous(breaks = seq(-1, 1, 0.05),
#                    limits = c(0, 0.33),
#                    expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_min
# Plot
gg_min <- ggplot(data = normalizedNeglect, aes(x = minTask1, y = TaskMeanNorm, colour = as.factor(n))) +
geom_point() +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized specialization") +
xlab("Min task 1 frequency") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
# scale_x_continuous(breaks = seq(-1, 1, 0.05),
#                    limits = c(0, 0.33),
#                    expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_min
# Plot
gg_min <- ggplot(data = normalizedNeglect, aes(x = maxTask1, y = TaskMeanNorm, colour = as.factor(n))) +
geom_point() +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized specialization") +
xlab("Min task 1 frequency") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
# scale_x_continuous(breaks = seq(-1, 1, 0.05),
#                    limits = c(0, 0.33),
#                    expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_min
# Plot
gg_min <- ggplot(data = normalizedNeglect, aes(x = minTask1, y = TaskMeanNorm, colour = as.factor(n))) +
geom_point() +
theme_classic() +
theme(legend.position = "none") +
ylab("Normalized specialization") +
xlab("Min task 1 frequency") +
scale_y_continuous(breaks = seq(0, 1, 0.2),
expand = c(0, 0.005)) +
# scale_x_continuous(breaks = seq(-1, 1, 0.05),
#                    limits = c(0, 0.33),
#                    expand = c(0, 0.005)) +
scale_color_manual(values = palette) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 8, margin = margin(5, 6, 5, -2), color = "black"),
axis.text.x = element_text(size = 8, margin = margin(6, 5, -2, 5), color = "black"),
axis.title = element_text(size = 10, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"),
aspect.ratio = 1)
gg_min
