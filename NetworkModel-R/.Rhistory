xlab("Timestep") +
facet_grid(replicate ~ n) +
ggtitle(paste("Fixed Thresholds, Sigma =", sigma[1])) +
theme(legend.position = "none",
axis.text = element_text(size = 6))
gg_corrtime
Corrs <- do.call("rbind", groups_taskCorr)
load("output/ParameterExploration/Rdata/FixedDelta06_SigmaSlopeExploration.Rdata")
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("output/__RData/FixedDelta06Sigma01Eta7100reps.Rdata")
Corrs <- do.call("rbind", groups_taskCorr)
Corrs <- Corrs %>%
mutate(Set = paste(n, replicate, sep = "-")) %>%
rowwise() %>%
mutate(Specialization = mean(c(Task1, Task2), na.rm = TRUE))
sigma <- ThreshSD / ThreshM
ThreshSD       <- ThreshM * 0.1 #population threshold standard deviations !!Change!!
ThreshM        <- c(10, 10) #population threshold means
ThreshSD       <- ThreshM * 0.1 #population threshold standard deviations !!Change!!
sigma <- ThreshSD / ThreshM
gg_corrtime <- ggplot(data = Corrs,
aes(x = timestep, y = Specialization, group = Set, col = as.factor(n))) +
geom_hline(data = Corrs,
aes(yintercept = 0),
colour = "grey30",
alpha = 0.5) +
geom_line(alpha = 0.6) +
theme_classic() +
scale_y_continuous(limits = c(-1, 1), breaks = seq(-1, 1, 0.5)) +
# scale_colour_manual(values = c("#F00924", "#4C0E78")) +
xlab("Timestep") +
facet_grid(replicate ~ n) +
ggtitle(paste("Fixed Thresholds, Sigma =", sigma[1])) +
theme(legend.position = "none",
axis.text = element_text(size = 6))
gg_corrtime
View(Corrs)
####################
# Parameter Space Exploration
####################
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
# load
load("output/ParameterExploration/Rdata/FixedDelta06_SigmaSlopeExploration.Rdata")
improve <- improve %>%
mutate(relativePercInc = (PercIncrease - 1.220554) / 1.220554,
relativeSlope   = (SlopeIncrease - 0.02322321) / 0.02322321,
relativeLarge   = (SpecLarge - 0.5915000) / 0.5915000,
relativeSmall   = (SpecSmall - 0.2663750) / 0.2663750,
Increase        = SlopeIncrease * 14) %>%
mutate(fit = (abs(relativeLarge) + abs(relativeSmall) + abs(relativeSlope)) / 3)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
library(ggthemes)
# Load and prep experimental data
source("scripts/3A_PrepPlotExperimentData.R")
yukoCorr <- yukoCorr %>%
mutate(Sigma = NA)
# Load and prep fixed probabilistic sigma = 0.1
load("output/__RData/FixedDelta06Sigma01Eta7100reps.Rdata")
taskCorrTot <- do.call("rbind", groups_taskCorr)
fixedprob_01 <-  taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(Sigma = 0.1,
Source = "Model") %>%
select(n, TaskMean, Source, Sigma)
# Load and prep fixed probabilistic sigma = 0.25
load("output/__RData/Fixed_Delta06Sigma025Eta7.Rdata")
taskCorrTot <- do.call("rbind", groups_taskCorr)
fixedprob_025 <-  taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(Sigma = 0.25,
Source = "Model") %>%
select(n, TaskMean, Source, Sigma)
# Load and prep fixed probabilistic sigma = 0.05
load("output/__RData/Fixed_Delta06Sigma005Eta7.Rdata")
taskCorrTot <- do.call("rbind", groups_taskCorr)
fixedprob_005 <-  taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(Sigma = 0.05,
Source = "Model") %>%
select(n, TaskMean, Source, Sigma)
# Load and prep fixed probabilistic sigma = 0.3, eta = 2
load("output/__RData/Fixed_Delta06Sigma03.Rdata")
taskCorrTot <- do.call("rbind", groups_taskCorr)
fixedprob_03 <-  taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2) %>%
mutate(Sigma = 0.3,
Source = "Model") %>%
select(n, TaskMean, Source, Sigma)
# Bind into large dataframe
allFixedProbCorr <- fixedprob_01 %>%
rbind(fixedprob_005) %>%
rbind(fixedprob_025) %>%
rbind(fixedprob_03) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source)) %>%
group_by(Source, n, Sigma) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE) %>%
mutate(Set = paste0(Source, Sigma)) %>%
mutate(Set = factor(Set, levels = c("ExperimentNA", "Model0.05", "Model0.1", "Model0.25", "Model0.3")))
# Set pallete
fixedProbpalette <- c("grey45", "#FFB84F", "#E81715", "#F55632", "#FD792C")
fillPalette <- c("#ffffff","#FFB84F", "#E81715", "#F55632", "#FD792C")
# Plot with experimental data
gg_fixedProb <- ggplot(data = allFixedProbCorr) +
theme_classic() +
labs(x = "Group Size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.1),
limits = c(0, 0.9)) +
scale_colour_manual(values = fixedProbpalette,
labels = c("Experiment",
expression(paste(sigma, " = 0.05, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.25, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")))) +
scale_fill_manual(values = fillPalette,
labels = c("Experiment",
expression(paste(sigma, " = 0.05, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.25, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")))) +
scale_shape_manual(values = c(21, 22, 21, 25, 24),
labels = c("Experiment",
expression(paste(sigma, " = 0.05, ", eta, " = 7")),
expression(paste(sigma, " = 0.1, ", eta, " = 7")),
expression(paste(sigma, " = 0.25, ", eta, " = 7")),
expression(paste(sigma, " = 0.3, ", eta, " = 2")))) +
# Mean and SE portion of plot
geom_errorbar(aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Set, width = 1.5),
position = position_dodge(width = 0.5),
size = 0.25) +
geom_line(aes(x = n, y = SpecMean,  colour = Set),
size = 0.3,
position = position_dodge(width = 0.5)) +
geom_point(aes(x = n, y = SpecMean, colour = Set, fill = Set, shape = Set),
position = position_dodge(width = 0.5),
size = 1.5) +
theme(legend.position = "none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.text.align = 0,
# legend.box.background = element_rect(),
axis.text.y = element_text(size = 6, margin = margin(5, 6, 5, -2)),
axis.text.x = element_text(size = 6, margin = margin(6, 5, -2, 5)),
axis.title = element_text(size = 6, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(-0.1, "cm"))
gg_fixedProb
svg("output/MSFigures/FixedProbSpecializationFits.svg", width = 2.65, height = 2.05)
gg_fixedProb
dev.off()
svg("output/MSFigures/FixedProbSpecializationFits.svg", width = 2.7, height = 2.05)
gg_fixedProb
dev.off()
svg("output/MSFigures/FixedProbSpecializationFits.svg", width = 2.75, height = 2.05)
gg_fixedProb
dev.off()
svg("output/MSFigures/FixedProbSpecializationFits.svg", width = 2.71, height = 2.05)
gg_fixedProb
dev.off()
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(scales)
library(RColorBrewer)
####################
# Prep and Plot
####################
# load
load("output/ParameterExploration/Rdata/FixedDelta06_SigmaSlopeExploration.Rdata")
improve <- improve %>%
mutate(relativePercInc = (PercIncrease - 1.220554) / 1.220554,
relativeSlope   = (SlopeIncrease - 0.02322321) / 0.02322321,
relativeLarge   = (SpecLarge - 0.5915000) / 0.5915000,
relativeSmall   = (SpecSmall - 0.2663750) / 0.2663750,
Increase        = SlopeIncrease * 14) %>%
mutate(fit = (abs(relativeLarge) + abs(relativeSmall) + abs(relativeSlope)) / 3)
# Set file names
filename <- "FixedDelta08"
improve1 <- improve
load("output/ParameterExploration/Rdata/FixedDelta08_SigmaSlopeExploration.Rdata")
improve <- improve %>%
mutate(relativePercInc = (PercIncrease - 1.220554) / 1.220554,
relativeSlope   = (SlopeIncrease - 0.02322321) / 0.02322321,
relativeLarge   = (SpecLarge - 0.5915000) / 0.5915000,
relativeSmall   = (SpecSmall - 0.2663750) / 0.2663750,
Increase        = SlopeIncrease * 14) %>%
mutate(fit = (abs(relativeLarge) + abs(relativeSmall) + abs(relativeSlope)) / 3)
# Set file names
filename <- "FixedDelta08"
improve$DiffFit <- abs(improve$fit) - abs(improve1$fit)
View(improve)
spec.loess <- loess(DiffFit ~ sigma * threshSlope, data = improve, degree = 2, span = 0.1)
diff.fit <- expand.grid(list(sigma = seq(0, max(improve$sigma), (max(improve$sigma) - min(improve$sigma)) / 1000),
threshSlope = seq(1, max(improve$threshSlope), (max(improve$threshSlope) - min(improve$threshSlope)) / 1000)))
diff.fit$spec <- as.numeric(z)
z <- predict(spec.loess, newdata = spec.fit)
z <- predict(spec.loess, newdata = diff.fit)
diff.fit$spec <- as.numeric(z)
gg_diff <- ggplot(diff.fit, aes(x = sigma, y = threshSlope, fill = spec)) +
geom_tile() +
theme_bw() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), breaks = c(0, 2, seq(10, 30, 10))) +
scale_fill_gradient2(name = "Improvement\nin Fit",
low = "#4d9221",
mid = "white",
high = "#c51b7d",
midpoint = 0,
limits = c(-0.5, 0.5),
oob = squish) +
xlab(expression(sigma)) +
ylab(expression(eta)) +
theme(legend.position = "right",
legend.title = element_text(size = 8),
legend.key.height = unit(0.5, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.key = element_rect(colour = "black", size = 0.5),
legend.margin =  margin(t = 0.1, r = 0.1, b = 0.1, l = 0.1, "cm"),
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.5),
panel.border = element_rect(fill = NA, size = 1))
gg_diff
ggsave("output/ParameterExploration/Plot/Fixed_0806DifferenceOfFit.png", width = 3, height = 2, units = "in", dpi = 600)
png("output/ParameterExploration/Plot/DifferenceOfFitDelta08Comparison.png", width = 5.5, height = 2, units = "in", res = 800)
multiplot(gg_fit, gg_diff, cols = 2)
dev.off()
gg_diff <- ggplot(diff.fit, aes(x = sigma, y = threshSlope, fill = spec)) +
geom_tile() +
theme_bw() +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), breaks = c(0, 2, seq(10, 30, 10))) +
scale_fill_gradient2(name = "Improvement\nin Fit",
low = "#4d9221",
mid = "white",
high = "#c51b7d",
midpoint = 0,
limits = c(-0.25, 0.25),
oob = squish) +
xlab(expression(sigma)) +
ylab(expression(eta)) +
theme(legend.position = "right",
legend.title = element_text(size = 8),
legend.key.height = unit(0.5, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.key = element_rect(colour = "black", size = 0.5),
legend.margin =  margin(t = 0.1, r = 0.1, b = 0.1, l = 0.1, "cm"),
legend.text = element_text(size = 8),
axis.text = element_text(size = 8),
axis.title = element_text(size = 10),
axis.ticks = element_line(size = 0.5),
panel.border = element_rect(fill = NA, size = 1))
gg_diff
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3A_PrepPlotExperimentData.R")
load("/Users/ChrisTokita/Documents/Research/Tarnita Lab/Evolution of DOL/Fixed_Delta06Sigma01Eta7LargerGroups100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7LargerGroups"
# Palette without single individuals
#palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Palette without single individuals
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
# Model vs Data Palette
compPalette <- c("indianred2", "black")
####################
# Final task distributions
####################
# Bind together
taskDist <- unlist(groups_taskDist, recursive = FALSE)
taskDistTot <- do.call("rbind", taskDist)
# Manipulate
taskDistTot <- taskDistTot %>%
mutate(set = paste0(n, "-", replicate)) %>%
mutate(set = factor(set,
levels = mixedsort(unique(set))),
n = as.factor(n))
taskSum <- taskDistTot %>%
group_by(n) %>%
summarise(taskMean1 = mean(Task1),
taskMean2 = mean(Task2))
# Plot
plot_TaskMat <- as.data.frame(taskDistTot)
gg_dist <- ggplot(data = plot_TaskMat, aes(y = Task1, x = set)) +
geom_point(aes(colour = n), size = 0.3) +
theme_classic() +
labs(x = "Group Size",
y = "Frequency Task 1") +
scale_color_manual(values = palette) +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, 0.2)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
####################
# Task variance by group size
####################
# Prep
taskVarMean <- taskDistTot %>%
mutate(n = as.character(n)) %>%
mutate(n = as.numeric(n)) %>%
group_by(n, replicate) %>%
summarise(SD1 = sd(Task1),
SD2 = sd(Task2),
Mean = mean(Task1)) %>%
mutate(Source = "Model",
SD = (SD1 + SD2) / 2)
taskVarMean$SD[is.na(taskVarMean$SD)] <- 0 #fix for single individuals
taskVarMean <- rbind(taskVarMean, yukoDataSummary)
# Calculate means and SE
taskVarMeans <- taskVarMean %>%
group_by(n, Source) %>%
summarise(MeanMean = mean(Mean),
MeanSE = sd(Mean) / sqrt(length(Mean)),
SDMean = mean(SD),
SDSE = sd(SD) / sqrt(length(SD)))
# Get mean at group size one and normalize
expSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == "Experiment"]
modSizeOne <- taskVarMeans$MeanMean[taskVarMeans$n == 1 & taskVarMeans$Source == "Model"]
expSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == "Experiment"]
modSizeSixteen <- taskVarMeans$SDMean[taskVarMeans$n == 16 & taskVarMeans$Source == "Model"]
# Normalize Mean Values
taskVarMeans$NormMean <- NA
taskVarMeans$NormMeanSE <- NA
taskVarMeans$NormMean[taskVarMeans$Source == "Experiment"] <- taskVarMeans$MeanMean[taskVarMeans$Source == "Experiment"] / expSizeOne
taskVarMeans$NormMean[taskVarMeans$Source == "Model"] <- taskVarMeans$MeanMean[taskVarMeans$Source == "Model"] / modSizeOne
taskVarMeans$NormMeanSE[taskVarMeans$Source == "Experiment"] <- taskVarMeans$MeanSE[taskVarMeans$Source == "Experiment"] / expSizeOne
taskVarMeans$NormMeanSE[taskVarMeans$Source == "Model"] <- taskVarMeans$MeanSE[taskVarMeans$Source == "Model"] / modSizeOne
taskVarMean$NormMean <- NA
taskVarMean$NormMean[taskVarMean$Source == "Experiment"] <- taskVarMean$Mean[taskVarMean$Source == "Experiment"] / expSizeOne
taskVarMean$NormMean[taskVarMean$Source == "Model"] <- taskVarMean$Mean[taskVarMean$Source == "Model"] / modSizeOne
# Normalize behavioral variation values
taskVarMeans$NormVarMean <- NA
taskVarMeans$NormVarMeanSE <- NA
taskVarMeans$NormVarMean[taskVarMeans$Source == "Experiment"] <- taskVarMeans$SDMean[taskVarMeans$Source == "Experiment"] / expSizeSixteen
taskVarMeans$NormVarMean[taskVarMeans$Source == "Model"] <- taskVarMeans$SDMean[taskVarMeans$Source == "Model"] / modSizeSixteen
taskVarMeans$NormVarMeanSE[taskVarMeans$Source == "Experiment"] <- taskVarMeans$SDSE[taskVarMeans$Source == "Experiment"] / expSizeSixteen
taskVarMeans$NormVarMeanSE[taskVarMeans$Source == "Model"] <- taskVarMeans$SDSE[taskVarMeans$Source == "Model"] / modSizeSixteen
taskVarMean$NormVarMean <- NA
taskVarMean$NormVarMean[taskVarMean$Source == "Experiment"] <- taskVarMean$SD[taskVarMean$Source == "Experiment"] / expSizeSixteen
taskVarMean$NormVarMean[taskVarMean$Source == "Model"] <- taskVarMean$SD[taskVarMean$Source == "Model"] / modSizeSixteen
# Prep for broken axis plot
taskVarMean <- as.data.frame(taskVarMean)
taskVarMeans <- as.data.frame(taskVarMeans)
addrows <- data.frame(n = c(37, 95),
Source = rep("Model", 2),
MeanMean = c(0.2996409, 0.2996395),
MeanSE = c(NA, NA),
SDMean = c(0.1257388, 0.1282122),
SDSE= c(NA, NA),
NormMean = c(0.8669811, 0.8669778),
NormMeanSE = c(NA, NA),
NormVarMean = c(1.059927, 1.080777),
NormVarMeanSE= c(NA, NA))
taskVarMeans <- rbind(taskVarMeans, addrows)
taskVarMean$mask <- 0
taskVarMean$mask[taskVarMean$n > 90] <- 1
taskVarMeans$mask <- 0
taskVarMeans$mask[taskVarMeans$n > 90] <- 1
# Plot variance and mean by group size
gg_varNorm <- ggplot() +
geom_hline(data = taskVarMean,
aes(yintercept = 1),
colour = "grey30") +
geom_point(data = taskVarMean,
aes(x = n, y = NormVarMean, colour = Source),
size = 0.8,
alpha = 0.4,
position = position_dodge(width = 1)) +
theme_classic() +
xlab("Group Size") +
ylab("Behavioral Variation (SD)\nRelative to Group Size 16") +
scale_x_continuous(breaks = unique(taskVarMean$n)) +
scale_y_continuous(breaks = seq(0, 3, 0.5)) +
scale_size_manual(values = c(2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2)) +
# Mean and SE portion of plot
geom_errorbar(data = taskVarMeans,
aes(x = n, ymin = NormVarMean - NormVarMeanSE, ymax = NormVarMean + NormVarMeanSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskVarMeans,
aes(x = n, y = NormVarMean, colour = Source, size = as.factor(n)),
position = position_dodge(width = 1)) +
geom_line(data = taskVarMeans,
aes(x = n, y = NormVarMean, colour = Source),
position = position_dodge(width = 1)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
strip.text = element_blank(),
strip.background = element_blank(),
panel.spacing = unit(0.25, "cm")) +
facet_grid(. ~ mask, space = "free", scale = "free")
gg_mean <- ggplot() +
geom_hline(data = taskVarMean,
aes(yintercept = 1),
colour = "grey30") +
geom_point(data = taskVarMean,
aes(x = n, y = NormMean, colour = Source),
size = 0.5,
alpha = 0.4,
position = position_dodge(width = 1)) +
theme_classic() +
xlab("Group Size") +
ylab("Behavioral Mean Relative to Group Size 1") +
scale_x_continuous(breaks = unique(taskVarMean$n)) +
scale_y_continuous(breaks = seq(0, 1.5, 0.05)) +
scale_size_manual(values = c(2, 2, 2, 2, 2, 2, 2, 2, -1, -1, 2)) +
# Mean and SE portion of plot
geom_errorbar(data = taskVarMeans,
aes(x = n, ymin = NormMean - NormMeanSE, ymax = NormMean + NormMeanSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskVarMeans,
aes(x = n, y = NormMean, colour = Source, size = as.factor(n)),
position = position_dodge(width = 1)) +
geom_line(data = taskVarMeans,
aes(x = n, y = NormMean, colour = Source),
position = position_dodge(width = 1)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
strip.text = element_blank(),
strip.background = element_blank(),
panel.spacing = unit(0.25, "cm")) +
facet_grid(. ~ mask, space = "free", scale = "free")
####################
# Task Rank Correlation
####################
# Unlist
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
# Manipulate and bind with Yuko data
taskCorrTot <- taskCorrTot %>%
mutate(Source = "Model") %>%
select(n, TaskMean, Source) %>%
rbind(yukoCorr) %>%
mutate(Source = as.factor(Source))
taskCorrTot <- as.data.frame(taskCorrTot)
# Calculate means and SE
taskCorrMeans <- taskCorrTot %>%
group_by(Source, n) %>%
summarise(SpecMean = mean(TaskMean),
SpecSE = sd(TaskMean) / sqrt(length(TaskMean)),
SpecCI = 1.96 * SpecSE)
# Set for broken axis
addrows <- data.frame(Source = rep("Model", 2),
n = c(37, 95),
SpecMean = c(0.6673539, 0.6885347),
SpecSE = c(NA, NA),
SpecCI = c(NA, NA))
taskCorrMeans <- as.data.frame(taskCorrMeans)
taskCorrMeans <- rbind(taskCorrMeans, addrows)
taskCorrMeans$mask <- 0
taskCorrMeans$mask[taskCorrMeans$n > 90] <- 1
taskCorrTot$mask <- 0
taskCorrTot$mask[taskCorrTot$n > 90] <- 1
# Plot
gg_corr <- ggplot() +
geom_hline(data = taskCorrTot,
aes(yintercept = 0),
colour = "grey30") +
geom_point(data = taskCorrTot,
aes(x = n, y = TaskMean, fill = Source, colour = Source),
size = 0.5,
position = position_dodge(width = 1),
alpha = 0.4) +
theme_classic() +
labs(x = "Group Size",
y = "Specialization") +
scale_x_continuous(breaks = unique(taskCorrTot$n)) +
scale_y_continuous(breaks = seq(-1, 1, 0.2)) +
scale_size_manual(values = c(2, 2, 2, 2, 2, 2, 2, -1, -1, 2)) +
scale_fill_manual(values = compPalette) +
scale_colour_manual(values = compPalette) +
theme(legend.position = "none",
strip.text = element_blank(),
strip.background = element_blank(),
panel.spacing = unit(0.25, "cm")) +
# Mean and SE portion of plot
geom_errorbar(data = taskCorrMeans,
aes(x = n, ymin = SpecMean - SpecSE, ymax = SpecMean + SpecSE, colour = Source, width = 1.5),
position = position_dodge(width = 1)) +
geom_point(data = taskCorrMeans,
aes(x = n, y = SpecMean, colour = Source, fill = Source, size = as.factor(n)),
position = position_dodge(width = 1)) +
geom_line(data = taskCorrMeans,
aes(x = n, y = SpecMean,  colour = Source),
position = position_dodge(width = 1)) +
facet_grid(. ~ mask, scales = "free", space = "free")
####################
# Plot all
####################
# MultiPlot
png(filename = paste0("output/_ComprehnsivePlots/", filename, ".png"), width = 16, height = 8, units = "in", res = 800)
multiplot(gg_dist, gg_mean,  gg_corr, gg_varNorm, cols = 4)
dev.off()
png(filename = paste0("output/_ComprehnsivePlots/", filename, ".png"), width = 16, height = 4, units = "in", res = 800)
multiplot(gg_dist, gg_mean,  gg_corr, gg_varNorm, cols = 4)
dev.off()
