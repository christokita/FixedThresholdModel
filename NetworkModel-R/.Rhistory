noTask1 = sum(replicate$Task1 == 0),
noTask2 = sum(replicate$Task2 == 0))
#  Quantify length of no-performance bouts
for (task in c("Task1", "Task2")) {
bout_lengths <- rle(replicate[ , task])
bout_lengths <- as.data.frame(do.call("cbind", bout_lengths))
bout_lengths <- bout_lengths %>%
filter(values == 0)
avg_nonPerformance <- mean(bout_lengths$lengths)
if(task == "Task1") {
to_return$noTask1Length = avg_nonPerformance
}
else {
to_return$noTask2Length = avg_nonPerformance
}
}
# Get averages
to_return <- to_return %>%
mutate(noTaskAvg = (noTask1 + noTask2) / 2,
noTaskLengthAvg = (noTask1Length + noTask2Length) / 2)
# Return
return(to_return)
})
# Bind and return
within_groupTaskPerf <- do.call("rbind", within_groupTaskPerf)
return(within_groupTaskPerf)
})
# Bind
noTaskPerf <- do.call("rbind", noTaskPerf)
# Plot
gg_noTask <- ggplot(data = noTaskPerf, aes(x = n, y = noTask1)) +
geom_point(size = 0.5, alpha = 0.3) +
theme_classic() +
scale_x_continuous(breaks = unique(noTaskPerf$n)) +
scale_y_continuous(limits = c(0, 8000)) +
xlab("Group Size") +
ylab("Instances of No Task 1 Performance")
# ylab("Avg. Length of No Task 1 Performance")
gg_noTask
####################
# Frequency of task not being performed vs. specialization
####################
# Load specialization
taskCorrTot <- do.call("rbind", groups_taskCorr)
taskCorrTot <- taskCorrTot %>%
mutate(TaskMean = (Task1 + Task2) / 2)
taskCorrTot <- taskCorrTot %>%
mutate(Set = paste0(n, "-", replicate)) %>%
select(n, TaskMean, Task1, Task2, Set)
# Merge
merged_specperf <- merge(taskCorrTot, noTaskPerf, by = c("Set", "n"))
# Plot
gg_specPerf <- ggplot(data = merged_specperf) +
geom_point(aes(x = TaskMean, y = noTask1, colour = as.factor(n))) +
theme_classic() +
facet_wrap(~n, scales = "free") +
scale_color_manual(values = palette) +
theme(legend.position = "none") +
ylab("Instances of Task 1 Neglect") +
xlab("Rank Correlation")
gg_specPerf
####################
# Check stimulus level at time of neglect
####################
neglectStim <- lapply(1:length(groups_taskTally), function(i) {
group_size <- groups_taskTally[[i]]
size_stim <- groups_stim[[i]]
# Loop through replicates within group size
within_groupPerfStim <- lapply(1:length(group_size), function(j) {
replicate <- group_size[[j]]
stim <- size_stim[[j]]
# Get which time steps had non-performance
# Task 1
steps <- which(replicate$Task1 == 0)
steps <- steps[steps > 15]
stim_levels <- stim$s1[steps+1]
zscore1 <- ( stim_levels - mean(stim$s1) ) / sd(stim$s1)
# Task 2
steps <- which(replicate$Task2 == 0)
steps <- steps[steps > 15]
stim_levels <- stim$s2[steps+1]
zscore2 <- ( stim_levels - mean(stim$s2) ) / sd(stim$s2)
to_return <- data.frame(n = unique(replicate$n), Zscore = c(zscore1, zscore2) )
return(to_return)
})
# Bind and return
within_groupPerfStim <- do.call('rbind', within_groupPerfStim)
return(within_groupPerfStim)
})
# Bind
neglectStim <- do.call('rbind', neglectStim)
# Graph
palette <- c("#83343E", "#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
gg_neglectStim <- ggplot(neglectStim, aes(x = Zscore,
color = as.factor(n),
fill = as.factor(n))) +
geom_histogram(bins = 50) +
theme_classic() +
xlab("Zscore of Stim Relative to Mean") +
geom_vline(xintercept = 0) +
scale_color_manual(values = palette) +
scale_fill_manual(values = palette) +
facet_wrap(~n, scales = "free_y") +
theme(legend.position = "none")
gg_neglectStim
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06_DetThreshDetQuit100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
####################
# Frequency of task not being performed
####################
noTaskPerf <- lapply(groups_taskTally, function(group_size) {
# Loop through replicates within group size
within_groupTaskPerf <- lapply(group_size, function(replicate) {
# Get basics and counts of instances in which there isn't anyone performing task
to_return <- data.frame(n = unique(replicate$n),
replicate = unique(replicate$replicate),
Set = paste0(unique(replicate$n), "-", unique(replicate$replicate)),
noTask1 = sum(replicate$Task1 == 0),
noTask2 = sum(replicate$Task2 == 0))
#  Quantify length of no-performance bouts
for (task in c("Task1", "Task2")) {
bout_lengths <- rle(replicate[ , task])
bout_lengths <- as.data.frame(do.call("cbind", bout_lengths))
bout_lengths <- bout_lengths %>%
filter(values == 0)
avg_nonPerformance <- mean(bout_lengths$lengths)
if(task == "Task1") {
to_return$noTask1Length = avg_nonPerformance
}
else {
to_return$noTask2Length = avg_nonPerformance
}
}
# Get averages
to_return <- to_return %>%
mutate(noTaskAvg = (noTask1 + noTask2) / 2,
noTaskLengthAvg = (noTask1Length + noTask2Length) / 2)
# Return
return(to_return)
})
# Bind and return
within_groupTaskPerf <- do.call("rbind", within_groupTaskPerf)
return(within_groupTaskPerf)
})
# Bind
noTaskPerf <- do.call("rbind", noTaskPerf)
# Plot
gg_noTask <- ggplot(data = noTaskPerf, aes(x = n, y = noTask1)) +
geom_point(size = 0.5, alpha = 0.3) +
theme_classic() +
scale_x_continuous(breaks = unique(noTaskPerf$n)) +
scale_y_continuous(limits = c(0, 8000)) +
xlab("Group Size") +
ylab("Instances of No Task 1 Performance")
# ylab("Avg. Length of No Task 1 Performance")
gg_noTask
rm(list = ls())
source("scripts/__Util__MASTER.R")
source("scripts/3_PrepPlotExperimentData.R")
load("output/__RData/MSrevision_FixedDelta06_DetThreshDetUpdate100reps.Rdata")
# Set variable
filename <- "Fixed_Delta06Sigma01Eta7"
# Palette without single individuals
palette <- c("#F00924", "#F7A329", "#FDD545", "#027C2C", "#1D10F9", "#4C0E78", "#bdbdbd", "#525252")
####################
# Frequency of task not being performed
####################
noTaskPerf <- lapply(groups_taskTally, function(group_size) {
# Loop through replicates within group size
within_groupTaskPerf <- lapply(group_size, function(replicate) {
# Get basics and counts of instances in which there isn't anyone performing task
to_return <- data.frame(n = unique(replicate$n),
replicate = unique(replicate$replicate),
Set = paste0(unique(replicate$n), "-", unique(replicate$replicate)),
noTask1 = sum(replicate$Task1 == 0),
noTask2 = sum(replicate$Task2 == 0))
#  Quantify length of no-performance bouts
for (task in c("Task1", "Task2")) {
bout_lengths <- rle(replicate[ , task])
bout_lengths <- as.data.frame(do.call("cbind", bout_lengths))
bout_lengths <- bout_lengths %>%
filter(values == 0)
avg_nonPerformance <- mean(bout_lengths$lengths)
if(task == "Task1") {
to_return$noTask1Length = avg_nonPerformance
}
else {
to_return$noTask2Length = avg_nonPerformance
}
}
# Get averages
to_return <- to_return %>%
mutate(noTaskAvg = (noTask1 + noTask2) / 2,
noTaskLengthAvg = (noTask1Length + noTask2Length) / 2)
# Return
return(to_return)
})
# Bind and return
within_groupTaskPerf <- do.call("rbind", within_groupTaskPerf)
return(within_groupTaskPerf)
})
# Bind
noTaskPerf <- do.call("rbind", noTaskPerf)
# Plot
gg_noTask <- ggplot(data = noTaskPerf, aes(x = n, y = noTask1)) +
geom_point(size = 0.5, alpha = 0.3) +
theme_classic() +
scale_x_continuous(breaks = unique(noTaskPerf$n)) +
scale_y_continuous(limits = c(0, 8000)) +
xlab("Group Size") +
ylab("Instances of No Task 1 Performance")
# ylab("Avg. Length of No Task 1 Performance")
gg_noTask
####################
# Parameter Space Exploration
####################
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(RColorBrewer)
library(scales)
##### Delta 06 #####
# load
load("output/ParameterExploration/Rdata/FixedDelta06_SigmaSlopeExplorationEXTRA.Rdata")
improve1 <- improve %>%
mutate(relativePercInc = (PercIncrease - 1.220554) / 1.220554,
relativeSlope   = (SlopeIncrease - 0.02322321) / 0.02322321,
relativeLarge   = (SpecLarge - 0.5915000) / 0.5915000,
relativeSmall   = (SpecSmall - 0.2663750) / 0.2663750,
Increase        = SlopeIncrease * 14) %>%
mutate(fit = (abs(relativeLarge) + abs(relativeSmall) + abs(relativeSlope)) / 3)
load("output/ParameterExploration/Rdata/FixedDelta06_SigmaSlopeExplorationEXTRA2.Rdata")
improve2 <- improve %>%
mutate(relativePercInc = (PercIncrease - 1.220554) / 1.220554,
relativeSlope   = (SlopeIncrease - 0.02322321) / 0.02322321,
relativeLarge   = (SpecLarge - 0.5915000) / 0.5915000,
relativeSmall   = (SpecSmall - 0.2663750) / 0.2663750,
Increase        = SlopeIncrease * 14) %>%
mutate(fit = (abs(relativeLarge) + abs(relativeSmall) + abs(relativeSlope)) / 3)
load("output/ParameterExploration/Rdata/FixedDelta06_SigmaSlopeExploration.Rdata")
improve <- improve %>%
mutate(relativePercInc = (PercIncrease - 1.220554) / 1.220554,
relativeSlope   = (SlopeIncrease - 0.02322321) / 0.02322321,
relativeLarge   = (SpecLarge - 0.5915000) / 0.5915000,
relativeSmall   = (SpecSmall - 0.2663750) / 0.2663750,
Increase        = SlopeIncrease * 14) %>%
mutate(fit = (abs(relativeLarge) + abs(relativeSmall) + abs(relativeSlope)) / 3)
improve06 <- rbind(improve, improve1, improve2)
rm(improve, improve1, improve2)
# Filter to size
improve06 <- improve06 %>%
filter(!sigma %in% c(0.075, 0.125, 0.175, 0.225, 0.275, 0.325))
##### Absolute Slope #####
# Colors
myPalette <- colorRampPalette(brewer.pal(6, "YlOrRd"))
colPal <- c(myPalette(6), "#800026")
# Fit surface
spec.loess <- loess(Increase ~ sigma * threshSlope, data = improve06, degree = 2, span = 0.1)
spec.fit <- expand.grid(list(sigma = seq(0, max(improve06$sigma), (max(improve06$sigma) - min(improve06$sigma)) / 1000),
threshSlope = seq(1, max(improve06$threshSlope), (max(improve06$threshSlope) - min(improve06$threshSlope)) / 1000)))
z <- predict(spec.loess, newdata = spec.fit)
spec.fit$spec <- as.numeric(z)
spec.fit$CloseIncrease <- ifelse(spec.fit$spec >= 0.2926124 & spec.fit$spec <= 0.3576374, 0.5, 0)
# Graph
gg_abslope <- ggplot() +
geom_raster(data = improve06,
aes(x = sigma,
y = threshSlope,
fill = Increase)) +
stat_contour(data = spec.fit,
aes(x = sigma,
y = threshSlope,
z = spec),
size = 0.35,
colour = "white",
breaks = c(0.2926124)) +
stat_contour(data = spec.fit,
aes(x = sigma,
y = threshSlope,
z = spec),
size = 0.35,
colour = "white",
linetype = "dashed",
breaks = c(0.3576374)) +
theme_bw() +
scale_x_continuous(expand = c(0, -0.002)) +
scale_y_continuous(expand = c(0, -0.2), breaks = c(1, seq(10, 30, 10))) +
scale_fill_gradientn(name = "Specialization\nIncrease",
colors = colPal,
breaks = seq(0, 0.5, 0.1),
colours = colPal,
limits = c(0, 0.5),
oob = squish) +
scale_colour_gradientn(name = "Specialization\nIncrease",
colors = colPal,
breaks = seq(0, 0.5, 0.1),
colours = colPal,
limits = c(0, 0.5),
oob = squish) +
xlab(expression(sigma)) +
ylab(expression(eta)) +
theme(legend.position = "none",
# legend.key.height = unit(0.84, "cm"),
legend.key.height = unit(0.17, "npc"),
legend.key.width= unit(0.2, "cm"),
legend.key = element_rect(colour = "black", size = 0.5),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.title = element_blank(),
axis.text.y = element_text(size = 8, margin = margin(5, 2, 5, -2)),
axis.text.x = element_text(size = 8, margin = margin(2, 5, -2, 5)),
axis.title = element_text(size = 11, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(0, "cm"),
panel.border = element_rect(fill = "NA", size = 1))
gg_abslope
gg_abslope <- ggplot() +
geom_raster(data = improve06,
aes(x = sigma,
y = threshSlope,
fill = Increase)) +
theme_bw() +
scale_x_continuous(expand = c(0, -0.002)) +
scale_y_continuous(expand = c(0, -0.2), breaks = c(1, seq(10, 30, 10))) +
scale_fill_gradientn(name = "Specialization\nIncrease",
colors = colPal,
breaks = seq(0, 0.5, 0.1),
colours = colPal,
limits = c(0, 0.5),
oob = squish) +
scale_colour_gradientn(name = "Specialization\nIncrease",
colors = colPal,
breaks = seq(0, 0.5, 0.1),
colours = colPal,
limits = c(0, 0.5),
oob = squish) +
xlab(expression(sigma)) +
ylab(expression(eta)) +
theme(legend.position = "none",
# legend.key.height = unit(0.84, "cm"),
legend.key.height = unit(0.17, "npc"),
legend.key.width= unit(0.2, "cm"),
legend.key = element_rect(colour = "black", size = 0.5),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.2, "cm"),
legend.text = element_text(size = 6),
legend.title = element_blank(),
axis.text.y = element_text(size = 8, margin = margin(5, 2, 5, -2)),
axis.text.x = element_text(size = 8, margin = margin(2, 5, -2, 5)),
axis.title = element_text(size = 11, margin = margin(0, 0, 0, 0)),
axis.ticks.length = unit(0, "cm"),
panel.border = element_rect(fill = "NA", size = 1))
gg_abslope
ggsave("output/MSFigures/ParameterSpaceDelta06NoContourfillNarrow.png", width = 2.1, height = 2, units = "in", dpi = 600)
rm(list = ls())
source("scripts/__Util__MASTER.R")
library(ggplot2)
####################
# Demonstrating thresholds
####################
# Thresh eta = 2
stim <- seq(0, 30, 0.1)
thresh2 <- data.frame(stim = stim, prob =  (stim^2) / (stim^2 + 10^2), eta = "2")
# Thresh eta = 7
thresh5 <- data.frame(stim = stim, prob =  (stim^7) / (stim^7 + 10^7), eta = "7")
# Thresh eta = 10
thresh10 <- data.frame(stim = stim, prob =  (stim^20) / (stim^20 + 10^20), eta = "20")
# Merge
threshStyles <- rbind(thresh2, thresh5, thresh10)
# Set label
threshold <- paste(expression(theta[ij]))
# Plot
gg_thresh <- ggplot(data = threshStyles, aes(x = stim, y = prob, colour = eta)) +
geom_vline(aes(xintercept = 10), linetype = "dotted", size = 0.4) +
geom_line(size = 0.5) +
theme_bw() +
xlab(expression(s[j])) +
ylab(expression(P[ij])) +
scale_y_continuous(limit = c(0, 1), breaks = seq(0, 1, 0.5), expand = c(0.1, 0)) +
scale_colour_manual(values = c("#08519c", "#4292c6", "#9ecae1"),
labels = c(expression(paste(eta, " = 2")),
expression(paste(eta, " = 7")),
expression(paste(eta, " = 20")))) +
annotate("text", x = 12, y = 0.0, label = threshold, parse = TRUE, size = 4) +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, size = 1),
legend.position = c(0.96, 0.30),
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.1, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
axis.text.x = element_text(size = 8),
axis.title = element_text(size = 10))
gg_thresh
# Plot
gg_thresh <- ggplot(data = threshStyles, aes(x = stim, y = prob, colour = eta)) +
geom_vline(aes(xintercept = 10), linetype = "dotted", size = 0.4) +
geom_line(size = 0.5) +
theme_bw() +
xlab(expression(s[j])) +
ylab(expression(P[ij])) +
scale_y_continuous(limit = c(0, 1), breaks = seq(0, 1, 0.5), expand = c(0.1, 0)) +
scale_colour_manual(values = c("#08519c", "#4292c6", "#9ecae1"),
labels = c(expression(paste(eta, " = 2")),
expression(paste(eta, " = 7")),
expression(paste(eta, " = 20")))) +
annotate("text", x = 12, y = 0.0, label = threshold, parse = TRUE, size = 4) +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, size = 1),
legend.position = c(0.96, 0.30),
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.1, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
axis.text = element_blank(),
axis.title = element_blank())
gg_thresh
gg_thresh <- ggplot(data = threshStyles, aes(x = stim, y = prob, colour = eta)) +
geom_line(size = 0.5) +
theme_bw() +
xlab(expression(s[j])) +
ylab(expression(P[ij])) +
scale_y_continuous(limit = c(0, 1), breaks = seq(0, 1, 0.5), expand = c(0.1, 0)) +
scale_colour_manual(values = c("#08519c", "#4292c6", "#9ecae1"),
labels = c(expression(paste(eta, " = 2")),
expression(paste(eta, " = 7")),
expression(paste(eta, " = 20")))) +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, size = 1),
legend.position = c(0.96, 0.30),
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.1, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
axis.text = element_blank(),
axis.title = element_blank())
gg_thresh
ggsave(file = "output/OtherFigures/ThresholdSlopeExamplesNoWords.png", width = 2, height = 2, units = "in", dpi = 800)
threshStyles <- threshStyles %>% filter(eta == "7")
# Plot
gg_thresh <- ggplot(data = threshStyles, aes(x = stim, y = prob, colour = eta)) +
geom_vline(aes(xintercept = 10), linetype = "dotted", size = 0.4) +
geom_line(size = 0.5) +
theme_bw() +
xlab(expression(s[j])) +
ylab(expression(P[ij])) +
scale_y_continuous(limit = c(0, 1), breaks = seq(0, 1, 0.5), expand = c(0.1, 0)) +
scale_colour_manual(values = c("#08519c", "#4292c6", "#9ecae1"),
labels = c(expression(paste(eta, " = 2")),
expression(paste(eta, " = 7")),
expression(paste(eta, " = 20")))) +
annotate("text", x = 12, y = 0.0, label = threshold, parse = TRUE, size = 4) +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, size = 1),
legend.position = c(0.96, 0.30),
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.1, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
axis.text = element_blank(),
axis.title = element_blank())
gg_thresh
gg_thresh <- ggplot(data = threshStyles, aes(x = stim, y = prob, colour = eta)) +
geom_line(size = 0.5) +
theme_bw() +
xlab(expression(s[j])) +
ylab(expression(P[ij])) +
scale_y_continuous(limit = c(0, 1), breaks = seq(0, 1, 0.5), expand = c(0.1, 0)) +
scale_colour_manual(values = c("#4292c6")) +
theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, size = 1),
legend.position = c(0.96, 0.30),
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.1, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
axis.text = element_blank(),
axis.title = element_blank())
gg_thresh
ggsave(file = "output/OtherFigures/ThresholdSlopeExamplesNoWordsOneSlope.png", width = 2, height = 2, units = "in", dpi = 800)
gg_thresh <- gg_thresh + theme(panel.grid = element_blank(),
panel.border = element_rect(fill = NA, size = 1),
legend.position ="none",
legend.justification = c(1, 1),
legend.title = element_blank(),
legend.key.height = unit(0.3, "cm"),
legend.key.width= unit(0.4, "cm"),
legend.margin =  margin(t = 0, r = 0, b = 0, l = -0.1, "cm"),
legend.text = element_text(size = 8),
legend.text.align = 0,
axis.text = element_blank(),
axis.title = element_blank())
gg_thresh
ggsave(file = "output/OtherFigures/ThresholdSlopeExamplesNoWordsOneSlope.png", width = 2, height = 2, units = "in", dpi = 800)
